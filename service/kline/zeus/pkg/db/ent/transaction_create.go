// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/transaction"
)

// TransactionCreate is the builder for creating a Transaction entity.
type TransactionCreate struct {
	config
	mutation *TransactionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TransactionCreate) SetCreatedAt(u uint32) *TransactionCreate {
	tc.mutation.SetCreatedAt(u)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableCreatedAt(u *uint32) *TransactionCreate {
	if u != nil {
		tc.SetCreatedAt(*u)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TransactionCreate) SetUpdatedAt(u uint32) *TransactionCreate {
	tc.mutation.SetUpdatedAt(u)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableUpdatedAt(u *uint32) *TransactionCreate {
	if u != nil {
		tc.SetUpdatedAt(*u)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TransactionCreate) SetDeletedAt(u uint32) *TransactionCreate {
	tc.mutation.SetDeletedAt(u)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableDeletedAt(u *uint32) *TransactionCreate {
	if u != nil {
		tc.SetDeletedAt(*u)
	}
	return tc
}

// SetPoolID sets the "pool_id" field.
func (tc *TransactionCreate) SetPoolID(u uint64) *TransactionCreate {
	tc.mutation.SetPoolID(u)
	return tc
}

// SetTransactionID sets the "transaction_id" field.
func (tc *TransactionCreate) SetTransactionID(u uint64) *TransactionCreate {
	tc.mutation.SetTransactionID(u)
	return tc
}

// SetTransactionType sets the "transaction_type" field.
func (tc *TransactionCreate) SetTransactionType(s string) *TransactionCreate {
	tc.mutation.SetTransactionType(s)
	return tc
}

// SetChainID sets the "chain_id" field.
func (tc *TransactionCreate) SetChainID(s string) *TransactionCreate {
	tc.mutation.SetChainID(s)
	return tc
}

// SetOwner sets the "owner" field.
func (tc *TransactionCreate) SetOwner(s string) *TransactionCreate {
	tc.mutation.SetOwner(s)
	return tc
}

// SetAmountZeroIn sets the "amount_zero_in" field.
func (tc *TransactionCreate) SetAmountZeroIn(f float64) *TransactionCreate {
	tc.mutation.SetAmountZeroIn(f)
	return tc
}

// SetAmountOneIn sets the "amount_one_in" field.
func (tc *TransactionCreate) SetAmountOneIn(f float64) *TransactionCreate {
	tc.mutation.SetAmountOneIn(f)
	return tc
}

// SetAmountZeroOut sets the "amount_zero_out" field.
func (tc *TransactionCreate) SetAmountZeroOut(f float64) *TransactionCreate {
	tc.mutation.SetAmountZeroOut(f)
	return tc
}

// SetAmountOneOut sets the "amount_one_out" field.
func (tc *TransactionCreate) SetAmountOneOut(f float64) *TransactionCreate {
	tc.mutation.SetAmountOneOut(f)
	return tc
}

// SetTimestamp sets the "timestamp" field.
func (tc *TransactionCreate) SetTimestamp(u uint32) *TransactionCreate {
	tc.mutation.SetTimestamp(u)
	return tc
}

// SetID sets the "id" field.
func (tc *TransactionCreate) SetID(u uint32) *TransactionCreate {
	tc.mutation.SetID(u)
	return tc
}

// Mutation returns the TransactionMutation object of the builder.
func (tc *TransactionCreate) Mutation() *TransactionMutation {
	return tc.mutation
}

// Save creates the Transaction in the database.
func (tc *TransactionCreate) Save(ctx context.Context) (*Transaction, error) {
	var (
		err  error
		node *Transaction
	)
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Transaction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TransactionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransactionCreate) SaveX(ctx context.Context) *Transaction {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransactionCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransactionCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransactionCreate) defaults() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		if transaction.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized transaction.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := transaction.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		if transaction.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized transaction.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := transaction.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		if transaction.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized transaction.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := transaction.DefaultDeletedAt()
		tc.mutation.SetDeletedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransactionCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Transaction.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Transaction.updated_at"`)}
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Transaction.deleted_at"`)}
	}
	if _, ok := tc.mutation.PoolID(); !ok {
		return &ValidationError{Name: "pool_id", err: errors.New(`ent: missing required field "Transaction.pool_id"`)}
	}
	if _, ok := tc.mutation.TransactionID(); !ok {
		return &ValidationError{Name: "transaction_id", err: errors.New(`ent: missing required field "Transaction.transaction_id"`)}
	}
	if _, ok := tc.mutation.TransactionType(); !ok {
		return &ValidationError{Name: "transaction_type", err: errors.New(`ent: missing required field "Transaction.transaction_type"`)}
	}
	if _, ok := tc.mutation.ChainID(); !ok {
		return &ValidationError{Name: "chain_id", err: errors.New(`ent: missing required field "Transaction.chain_id"`)}
	}
	if _, ok := tc.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "Transaction.owner"`)}
	}
	if _, ok := tc.mutation.AmountZeroIn(); !ok {
		return &ValidationError{Name: "amount_zero_in", err: errors.New(`ent: missing required field "Transaction.amount_zero_in"`)}
	}
	if _, ok := tc.mutation.AmountOneIn(); !ok {
		return &ValidationError{Name: "amount_one_in", err: errors.New(`ent: missing required field "Transaction.amount_one_in"`)}
	}
	if _, ok := tc.mutation.AmountZeroOut(); !ok {
		return &ValidationError{Name: "amount_zero_out", err: errors.New(`ent: missing required field "Transaction.amount_zero_out"`)}
	}
	if _, ok := tc.mutation.AmountOneOut(); !ok {
		return &ValidationError{Name: "amount_one_out", err: errors.New(`ent: missing required field "Transaction.amount_one_out"`)}
	}
	if _, ok := tc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Transaction.timestamp"`)}
	}
	return nil
}

func (tc *TransactionCreate) sqlSave(ctx context.Context) (*Transaction, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (tc *TransactionCreate) createSpec() (*Transaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Transaction{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: transaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: transaction.FieldID,
			},
		}
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.PoolID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transaction.FieldPoolID,
		})
		_node.PoolID = value
	}
	if value, ok := tc.mutation.TransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transaction.FieldTransactionID,
		})
		_node.TransactionID = value
	}
	if value, ok := tc.mutation.TransactionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldTransactionType,
		})
		_node.TransactionType = value
	}
	if value, ok := tc.mutation.ChainID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldChainID,
		})
		_node.ChainID = value
	}
	if value, ok := tc.mutation.Owner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldOwner,
		})
		_node.Owner = value
	}
	if value, ok := tc.mutation.AmountZeroIn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountZeroIn,
		})
		_node.AmountZeroIn = value
	}
	if value, ok := tc.mutation.AmountOneIn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountOneIn,
		})
		_node.AmountOneIn = value
	}
	if value, ok := tc.mutation.AmountZeroOut(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountZeroOut,
		})
		_node.AmountZeroOut = value
	}
	if value, ok := tc.mutation.AmountOneOut(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountOneOut,
		})
		_node.AmountOneOut = value
	}
	if value, ok := tc.mutation.Timestamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldTimestamp,
		})
		_node.Timestamp = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transaction.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransactionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TransactionCreate) OnConflict(opts ...sql.ConflictOption) *TransactionUpsertOne {
	tc.conflict = opts
	return &TransactionUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transaction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TransactionCreate) OnConflictColumns(columns ...string) *TransactionUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TransactionUpsertOne{
		create: tc,
	}
}

type (
	// TransactionUpsertOne is the builder for "upsert"-ing
	//  one Transaction node.
	TransactionUpsertOne struct {
		create *TransactionCreate
	}

	// TransactionUpsert is the "OnConflict" setter.
	TransactionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *TransactionUpsert) SetCreatedAt(v uint32) *TransactionUpsert {
	u.Set(transaction.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateCreatedAt() *TransactionUpsert {
	u.SetExcluded(transaction.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TransactionUpsert) AddCreatedAt(v uint32) *TransactionUpsert {
	u.Add(transaction.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransactionUpsert) SetUpdatedAt(v uint32) *TransactionUpsert {
	u.Set(transaction.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateUpdatedAt() *TransactionUpsert {
	u.SetExcluded(transaction.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TransactionUpsert) AddUpdatedAt(v uint32) *TransactionUpsert {
	u.Add(transaction.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransactionUpsert) SetDeletedAt(v uint32) *TransactionUpsert {
	u.Set(transaction.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateDeletedAt() *TransactionUpsert {
	u.SetExcluded(transaction.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TransactionUpsert) AddDeletedAt(v uint32) *TransactionUpsert {
	u.Add(transaction.FieldDeletedAt, v)
	return u
}

// SetPoolID sets the "pool_id" field.
func (u *TransactionUpsert) SetPoolID(v uint64) *TransactionUpsert {
	u.Set(transaction.FieldPoolID, v)
	return u
}

// UpdatePoolID sets the "pool_id" field to the value that was provided on create.
func (u *TransactionUpsert) UpdatePoolID() *TransactionUpsert {
	u.SetExcluded(transaction.FieldPoolID)
	return u
}

// AddPoolID adds v to the "pool_id" field.
func (u *TransactionUpsert) AddPoolID(v uint64) *TransactionUpsert {
	u.Add(transaction.FieldPoolID, v)
	return u
}

// SetTransactionID sets the "transaction_id" field.
func (u *TransactionUpsert) SetTransactionID(v uint64) *TransactionUpsert {
	u.Set(transaction.FieldTransactionID, v)
	return u
}

// UpdateTransactionID sets the "transaction_id" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateTransactionID() *TransactionUpsert {
	u.SetExcluded(transaction.FieldTransactionID)
	return u
}

// AddTransactionID adds v to the "transaction_id" field.
func (u *TransactionUpsert) AddTransactionID(v uint64) *TransactionUpsert {
	u.Add(transaction.FieldTransactionID, v)
	return u
}

// SetTransactionType sets the "transaction_type" field.
func (u *TransactionUpsert) SetTransactionType(v string) *TransactionUpsert {
	u.Set(transaction.FieldTransactionType, v)
	return u
}

// UpdateTransactionType sets the "transaction_type" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateTransactionType() *TransactionUpsert {
	u.SetExcluded(transaction.FieldTransactionType)
	return u
}

// SetChainID sets the "chain_id" field.
func (u *TransactionUpsert) SetChainID(v string) *TransactionUpsert {
	u.Set(transaction.FieldChainID, v)
	return u
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateChainID() *TransactionUpsert {
	u.SetExcluded(transaction.FieldChainID)
	return u
}

// SetOwner sets the "owner" field.
func (u *TransactionUpsert) SetOwner(v string) *TransactionUpsert {
	u.Set(transaction.FieldOwner, v)
	return u
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateOwner() *TransactionUpsert {
	u.SetExcluded(transaction.FieldOwner)
	return u
}

// SetAmountZeroIn sets the "amount_zero_in" field.
func (u *TransactionUpsert) SetAmountZeroIn(v float64) *TransactionUpsert {
	u.Set(transaction.FieldAmountZeroIn, v)
	return u
}

// UpdateAmountZeroIn sets the "amount_zero_in" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateAmountZeroIn() *TransactionUpsert {
	u.SetExcluded(transaction.FieldAmountZeroIn)
	return u
}

// AddAmountZeroIn adds v to the "amount_zero_in" field.
func (u *TransactionUpsert) AddAmountZeroIn(v float64) *TransactionUpsert {
	u.Add(transaction.FieldAmountZeroIn, v)
	return u
}

// SetAmountOneIn sets the "amount_one_in" field.
func (u *TransactionUpsert) SetAmountOneIn(v float64) *TransactionUpsert {
	u.Set(transaction.FieldAmountOneIn, v)
	return u
}

// UpdateAmountOneIn sets the "amount_one_in" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateAmountOneIn() *TransactionUpsert {
	u.SetExcluded(transaction.FieldAmountOneIn)
	return u
}

// AddAmountOneIn adds v to the "amount_one_in" field.
func (u *TransactionUpsert) AddAmountOneIn(v float64) *TransactionUpsert {
	u.Add(transaction.FieldAmountOneIn, v)
	return u
}

// SetAmountZeroOut sets the "amount_zero_out" field.
func (u *TransactionUpsert) SetAmountZeroOut(v float64) *TransactionUpsert {
	u.Set(transaction.FieldAmountZeroOut, v)
	return u
}

// UpdateAmountZeroOut sets the "amount_zero_out" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateAmountZeroOut() *TransactionUpsert {
	u.SetExcluded(transaction.FieldAmountZeroOut)
	return u
}

// AddAmountZeroOut adds v to the "amount_zero_out" field.
func (u *TransactionUpsert) AddAmountZeroOut(v float64) *TransactionUpsert {
	u.Add(transaction.FieldAmountZeroOut, v)
	return u
}

// SetAmountOneOut sets the "amount_one_out" field.
func (u *TransactionUpsert) SetAmountOneOut(v float64) *TransactionUpsert {
	u.Set(transaction.FieldAmountOneOut, v)
	return u
}

// UpdateAmountOneOut sets the "amount_one_out" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateAmountOneOut() *TransactionUpsert {
	u.SetExcluded(transaction.FieldAmountOneOut)
	return u
}

// AddAmountOneOut adds v to the "amount_one_out" field.
func (u *TransactionUpsert) AddAmountOneOut(v float64) *TransactionUpsert {
	u.Add(transaction.FieldAmountOneOut, v)
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *TransactionUpsert) SetTimestamp(v uint32) *TransactionUpsert {
	u.Set(transaction.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateTimestamp() *TransactionUpsert {
	u.SetExcluded(transaction.FieldTimestamp)
	return u
}

// AddTimestamp adds v to the "timestamp" field.
func (u *TransactionUpsert) AddTimestamp(v uint32) *TransactionUpsert {
	u.Add(transaction.FieldTimestamp, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Transaction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransactionUpsertOne) UpdateNewValues() *TransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(transaction.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transaction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TransactionUpsertOne) Ignore() *TransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransactionUpsertOne) DoNothing() *TransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransactionCreate.OnConflict
// documentation for more info.
func (u *TransactionUpsertOne) Update(set func(*TransactionUpsert)) *TransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransactionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TransactionUpsertOne) SetCreatedAt(v uint32) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TransactionUpsertOne) AddCreatedAt(v uint32) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateCreatedAt() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransactionUpsertOne) SetUpdatedAt(v uint32) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TransactionUpsertOne) AddUpdatedAt(v uint32) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateUpdatedAt() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransactionUpsertOne) SetDeletedAt(v uint32) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TransactionUpsertOne) AddDeletedAt(v uint32) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateDeletedAt() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetPoolID sets the "pool_id" field.
func (u *TransactionUpsertOne) SetPoolID(v uint64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetPoolID(v)
	})
}

// AddPoolID adds v to the "pool_id" field.
func (u *TransactionUpsertOne) AddPoolID(v uint64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddPoolID(v)
	})
}

// UpdatePoolID sets the "pool_id" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdatePoolID() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdatePoolID()
	})
}

// SetTransactionID sets the "transaction_id" field.
func (u *TransactionUpsertOne) SetTransactionID(v uint64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetTransactionID(v)
	})
}

// AddTransactionID adds v to the "transaction_id" field.
func (u *TransactionUpsertOne) AddTransactionID(v uint64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddTransactionID(v)
	})
}

// UpdateTransactionID sets the "transaction_id" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateTransactionID() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateTransactionID()
	})
}

// SetTransactionType sets the "transaction_type" field.
func (u *TransactionUpsertOne) SetTransactionType(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetTransactionType(v)
	})
}

// UpdateTransactionType sets the "transaction_type" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateTransactionType() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateTransactionType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *TransactionUpsertOne) SetChainID(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateChainID() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateChainID()
	})
}

// SetOwner sets the "owner" field.
func (u *TransactionUpsertOne) SetOwner(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateOwner() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateOwner()
	})
}

// SetAmountZeroIn sets the "amount_zero_in" field.
func (u *TransactionUpsertOne) SetAmountZeroIn(v float64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetAmountZeroIn(v)
	})
}

// AddAmountZeroIn adds v to the "amount_zero_in" field.
func (u *TransactionUpsertOne) AddAmountZeroIn(v float64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddAmountZeroIn(v)
	})
}

// UpdateAmountZeroIn sets the "amount_zero_in" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateAmountZeroIn() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateAmountZeroIn()
	})
}

// SetAmountOneIn sets the "amount_one_in" field.
func (u *TransactionUpsertOne) SetAmountOneIn(v float64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetAmountOneIn(v)
	})
}

// AddAmountOneIn adds v to the "amount_one_in" field.
func (u *TransactionUpsertOne) AddAmountOneIn(v float64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddAmountOneIn(v)
	})
}

// UpdateAmountOneIn sets the "amount_one_in" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateAmountOneIn() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateAmountOneIn()
	})
}

// SetAmountZeroOut sets the "amount_zero_out" field.
func (u *TransactionUpsertOne) SetAmountZeroOut(v float64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetAmountZeroOut(v)
	})
}

// AddAmountZeroOut adds v to the "amount_zero_out" field.
func (u *TransactionUpsertOne) AddAmountZeroOut(v float64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddAmountZeroOut(v)
	})
}

// UpdateAmountZeroOut sets the "amount_zero_out" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateAmountZeroOut() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateAmountZeroOut()
	})
}

// SetAmountOneOut sets the "amount_one_out" field.
func (u *TransactionUpsertOne) SetAmountOneOut(v float64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetAmountOneOut(v)
	})
}

// AddAmountOneOut adds v to the "amount_one_out" field.
func (u *TransactionUpsertOne) AddAmountOneOut(v float64) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddAmountOneOut(v)
	})
}

// UpdateAmountOneOut sets the "amount_one_out" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateAmountOneOut() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateAmountOneOut()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *TransactionUpsertOne) SetTimestamp(v uint32) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetTimestamp(v)
	})
}

// AddTimestamp adds v to the "timestamp" field.
func (u *TransactionUpsertOne) AddTimestamp(v uint32) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.AddTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateTimestamp() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateTimestamp()
	})
}

// Exec executes the query.
func (u *TransactionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TransactionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransactionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TransactionUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TransactionUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TransactionCreateBulk is the builder for creating many Transaction entities in bulk.
type TransactionCreateBulk struct {
	config
	builders []*TransactionCreate
	conflict []sql.ConflictOption
}

// Save creates the Transaction entities in the database.
func (tcb *TransactionCreateBulk) Save(ctx context.Context) ([]*Transaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transaction, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransactionCreateBulk) SaveX(ctx context.Context) []*Transaction {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransactionCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transaction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransactionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TransactionCreateBulk) OnConflict(opts ...sql.ConflictOption) *TransactionUpsertBulk {
	tcb.conflict = opts
	return &TransactionUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transaction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TransactionCreateBulk) OnConflictColumns(columns ...string) *TransactionUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TransactionUpsertBulk{
		create: tcb,
	}
}

// TransactionUpsertBulk is the builder for "upsert"-ing
// a bulk of Transaction nodes.
type TransactionUpsertBulk struct {
	create *TransactionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Transaction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransactionUpsertBulk) UpdateNewValues() *TransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(transaction.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transaction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TransactionUpsertBulk) Ignore() *TransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransactionUpsertBulk) DoNothing() *TransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransactionCreateBulk.OnConflict
// documentation for more info.
func (u *TransactionUpsertBulk) Update(set func(*TransactionUpsert)) *TransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransactionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TransactionUpsertBulk) SetCreatedAt(v uint32) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TransactionUpsertBulk) AddCreatedAt(v uint32) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateCreatedAt() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransactionUpsertBulk) SetUpdatedAt(v uint32) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TransactionUpsertBulk) AddUpdatedAt(v uint32) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateUpdatedAt() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TransactionUpsertBulk) SetDeletedAt(v uint32) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TransactionUpsertBulk) AddDeletedAt(v uint32) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateDeletedAt() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetPoolID sets the "pool_id" field.
func (u *TransactionUpsertBulk) SetPoolID(v uint64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetPoolID(v)
	})
}

// AddPoolID adds v to the "pool_id" field.
func (u *TransactionUpsertBulk) AddPoolID(v uint64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddPoolID(v)
	})
}

// UpdatePoolID sets the "pool_id" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdatePoolID() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdatePoolID()
	})
}

// SetTransactionID sets the "transaction_id" field.
func (u *TransactionUpsertBulk) SetTransactionID(v uint64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetTransactionID(v)
	})
}

// AddTransactionID adds v to the "transaction_id" field.
func (u *TransactionUpsertBulk) AddTransactionID(v uint64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddTransactionID(v)
	})
}

// UpdateTransactionID sets the "transaction_id" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateTransactionID() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateTransactionID()
	})
}

// SetTransactionType sets the "transaction_type" field.
func (u *TransactionUpsertBulk) SetTransactionType(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetTransactionType(v)
	})
}

// UpdateTransactionType sets the "transaction_type" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateTransactionType() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateTransactionType()
	})
}

// SetChainID sets the "chain_id" field.
func (u *TransactionUpsertBulk) SetChainID(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetChainID(v)
	})
}

// UpdateChainID sets the "chain_id" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateChainID() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateChainID()
	})
}

// SetOwner sets the "owner" field.
func (u *TransactionUpsertBulk) SetOwner(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateOwner() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateOwner()
	})
}

// SetAmountZeroIn sets the "amount_zero_in" field.
func (u *TransactionUpsertBulk) SetAmountZeroIn(v float64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetAmountZeroIn(v)
	})
}

// AddAmountZeroIn adds v to the "amount_zero_in" field.
func (u *TransactionUpsertBulk) AddAmountZeroIn(v float64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddAmountZeroIn(v)
	})
}

// UpdateAmountZeroIn sets the "amount_zero_in" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateAmountZeroIn() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateAmountZeroIn()
	})
}

// SetAmountOneIn sets the "amount_one_in" field.
func (u *TransactionUpsertBulk) SetAmountOneIn(v float64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetAmountOneIn(v)
	})
}

// AddAmountOneIn adds v to the "amount_one_in" field.
func (u *TransactionUpsertBulk) AddAmountOneIn(v float64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddAmountOneIn(v)
	})
}

// UpdateAmountOneIn sets the "amount_one_in" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateAmountOneIn() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateAmountOneIn()
	})
}

// SetAmountZeroOut sets the "amount_zero_out" field.
func (u *TransactionUpsertBulk) SetAmountZeroOut(v float64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetAmountZeroOut(v)
	})
}

// AddAmountZeroOut adds v to the "amount_zero_out" field.
func (u *TransactionUpsertBulk) AddAmountZeroOut(v float64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddAmountZeroOut(v)
	})
}

// UpdateAmountZeroOut sets the "amount_zero_out" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateAmountZeroOut() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateAmountZeroOut()
	})
}

// SetAmountOneOut sets the "amount_one_out" field.
func (u *TransactionUpsertBulk) SetAmountOneOut(v float64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetAmountOneOut(v)
	})
}

// AddAmountOneOut adds v to the "amount_one_out" field.
func (u *TransactionUpsertBulk) AddAmountOneOut(v float64) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddAmountOneOut(v)
	})
}

// UpdateAmountOneOut sets the "amount_one_out" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateAmountOneOut() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateAmountOneOut()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *TransactionUpsertBulk) SetTimestamp(v uint32) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetTimestamp(v)
	})
}

// AddTimestamp adds v to the "timestamp" field.
func (u *TransactionUpsertBulk) AddTimestamp(v uint32) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.AddTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateTimestamp() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateTimestamp()
	})
}

// Exec executes the query.
func (u *TransactionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TransactionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TransactionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransactionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
