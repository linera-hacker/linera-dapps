// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/predicate"
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/transaction"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks     []Hook
	mutation  *TransactionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TransactionUpdate) SetCreatedAt(u uint32) *TransactionUpdate {
	tu.mutation.ResetCreatedAt()
	tu.mutation.SetCreatedAt(u)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCreatedAt(u *uint32) *TransactionUpdate {
	if u != nil {
		tu.SetCreatedAt(*u)
	}
	return tu
}

// AddCreatedAt adds u to the "created_at" field.
func (tu *TransactionUpdate) AddCreatedAt(u int32) *TransactionUpdate {
	tu.mutation.AddCreatedAt(u)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TransactionUpdate) SetUpdatedAt(u uint32) *TransactionUpdate {
	tu.mutation.ResetUpdatedAt()
	tu.mutation.SetUpdatedAt(u)
	return tu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tu *TransactionUpdate) AddUpdatedAt(u int32) *TransactionUpdate {
	tu.mutation.AddUpdatedAt(u)
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TransactionUpdate) SetDeletedAt(u uint32) *TransactionUpdate {
	tu.mutation.ResetDeletedAt()
	tu.mutation.SetDeletedAt(u)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableDeletedAt(u *uint32) *TransactionUpdate {
	if u != nil {
		tu.SetDeletedAt(*u)
	}
	return tu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tu *TransactionUpdate) AddDeletedAt(u int32) *TransactionUpdate {
	tu.mutation.AddDeletedAt(u)
	return tu
}

// SetPoolID sets the "pool_id" field.
func (tu *TransactionUpdate) SetPoolID(u uint64) *TransactionUpdate {
	tu.mutation.ResetPoolID()
	tu.mutation.SetPoolID(u)
	return tu
}

// AddPoolID adds u to the "pool_id" field.
func (tu *TransactionUpdate) AddPoolID(u int64) *TransactionUpdate {
	tu.mutation.AddPoolID(u)
	return tu
}

// SetTransactionID sets the "transaction_id" field.
func (tu *TransactionUpdate) SetTransactionID(u uint64) *TransactionUpdate {
	tu.mutation.ResetTransactionID()
	tu.mutation.SetTransactionID(u)
	return tu
}

// AddTransactionID adds u to the "transaction_id" field.
func (tu *TransactionUpdate) AddTransactionID(u int64) *TransactionUpdate {
	tu.mutation.AddTransactionID(u)
	return tu
}

// SetTransactionType sets the "transaction_type" field.
func (tu *TransactionUpdate) SetTransactionType(s string) *TransactionUpdate {
	tu.mutation.SetTransactionType(s)
	return tu
}

// SetChainID sets the "chain_id" field.
func (tu *TransactionUpdate) SetChainID(s string) *TransactionUpdate {
	tu.mutation.SetChainID(s)
	return tu
}

// SetOwner sets the "owner" field.
func (tu *TransactionUpdate) SetOwner(s string) *TransactionUpdate {
	tu.mutation.SetOwner(s)
	return tu
}

// SetAmountZeroIn sets the "amount_zero_in" field.
func (tu *TransactionUpdate) SetAmountZeroIn(f float64) *TransactionUpdate {
	tu.mutation.ResetAmountZeroIn()
	tu.mutation.SetAmountZeroIn(f)
	return tu
}

// AddAmountZeroIn adds f to the "amount_zero_in" field.
func (tu *TransactionUpdate) AddAmountZeroIn(f float64) *TransactionUpdate {
	tu.mutation.AddAmountZeroIn(f)
	return tu
}

// SetAmountOneIn sets the "amount_one_in" field.
func (tu *TransactionUpdate) SetAmountOneIn(f float64) *TransactionUpdate {
	tu.mutation.ResetAmountOneIn()
	tu.mutation.SetAmountOneIn(f)
	return tu
}

// AddAmountOneIn adds f to the "amount_one_in" field.
func (tu *TransactionUpdate) AddAmountOneIn(f float64) *TransactionUpdate {
	tu.mutation.AddAmountOneIn(f)
	return tu
}

// SetAmountZeroOut sets the "amount_zero_out" field.
func (tu *TransactionUpdate) SetAmountZeroOut(f float64) *TransactionUpdate {
	tu.mutation.ResetAmountZeroOut()
	tu.mutation.SetAmountZeroOut(f)
	return tu
}

// AddAmountZeroOut adds f to the "amount_zero_out" field.
func (tu *TransactionUpdate) AddAmountZeroOut(f float64) *TransactionUpdate {
	tu.mutation.AddAmountZeroOut(f)
	return tu
}

// SetAmountOneOut sets the "amount_one_out" field.
func (tu *TransactionUpdate) SetAmountOneOut(f float64) *TransactionUpdate {
	tu.mutation.ResetAmountOneOut()
	tu.mutation.SetAmountOneOut(f)
	return tu
}

// AddAmountOneOut adds f to the "amount_one_out" field.
func (tu *TransactionUpdate) AddAmountOneOut(f float64) *TransactionUpdate {
	tu.mutation.AddAmountOneOut(f)
	return tu
}

// SetTimestamp sets the "timestamp" field.
func (tu *TransactionUpdate) SetTimestamp(u uint32) *TransactionUpdate {
	tu.mutation.ResetTimestamp()
	tu.mutation.SetTimestamp(u)
	return tu
}

// AddTimestamp adds u to the "timestamp" field.
func (tu *TransactionUpdate) AddTimestamp(u int32) *TransactionUpdate {
	tu.mutation.AddTimestamp(u)
	return tu
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := tu.defaults(); err != nil {
		return 0, err
	}
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TransactionUpdate) defaults() error {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		if transaction.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized transaction.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := transaction.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TransactionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransactionUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: transaction.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldCreatedAt,
		})
	}
	if value, ok := tu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldCreatedAt,
		})
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldUpdatedAt,
		})
	}
	if value, ok := tu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldUpdatedAt,
		})
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldDeletedAt,
		})
	}
	if value, ok := tu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldDeletedAt,
		})
	}
	if value, ok := tu.mutation.PoolID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transaction.FieldPoolID,
		})
	}
	if value, ok := tu.mutation.AddedPoolID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transaction.FieldPoolID,
		})
	}
	if value, ok := tu.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transaction.FieldTransactionID,
		})
	}
	if value, ok := tu.mutation.AddedTransactionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transaction.FieldTransactionID,
		})
	}
	if value, ok := tu.mutation.TransactionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldTransactionType,
		})
	}
	if value, ok := tu.mutation.ChainID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldChainID,
		})
	}
	if value, ok := tu.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldOwner,
		})
	}
	if value, ok := tu.mutation.AmountZeroIn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountZeroIn,
		})
	}
	if value, ok := tu.mutation.AddedAmountZeroIn(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountZeroIn,
		})
	}
	if value, ok := tu.mutation.AmountOneIn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountOneIn,
		})
	}
	if value, ok := tu.mutation.AddedAmountOneIn(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountOneIn,
		})
	}
	if value, ok := tu.mutation.AmountZeroOut(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountZeroOut,
		})
	}
	if value, ok := tu.mutation.AddedAmountZeroOut(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountZeroOut,
		})
	}
	if value, ok := tu.mutation.AmountOneOut(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountOneOut,
		})
	}
	if value, ok := tu.mutation.AddedAmountOneOut(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountOneOut,
		})
	}
	if value, ok := tu.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldTimestamp,
		})
	}
	if value, ok := tu.mutation.AddedTimestamp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldTimestamp,
		})
	}
	_spec.Modifiers = tu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TransactionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TransactionUpdateOne) SetCreatedAt(u uint32) *TransactionUpdateOne {
	tuo.mutation.ResetCreatedAt()
	tuo.mutation.SetCreatedAt(u)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCreatedAt(u *uint32) *TransactionUpdateOne {
	if u != nil {
		tuo.SetCreatedAt(*u)
	}
	return tuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tuo *TransactionUpdateOne) AddCreatedAt(u int32) *TransactionUpdateOne {
	tuo.mutation.AddCreatedAt(u)
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TransactionUpdateOne) SetUpdatedAt(u uint32) *TransactionUpdateOne {
	tuo.mutation.ResetUpdatedAt()
	tuo.mutation.SetUpdatedAt(u)
	return tuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tuo *TransactionUpdateOne) AddUpdatedAt(u int32) *TransactionUpdateOne {
	tuo.mutation.AddUpdatedAt(u)
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TransactionUpdateOne) SetDeletedAt(u uint32) *TransactionUpdateOne {
	tuo.mutation.ResetDeletedAt()
	tuo.mutation.SetDeletedAt(u)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableDeletedAt(u *uint32) *TransactionUpdateOne {
	if u != nil {
		tuo.SetDeletedAt(*u)
	}
	return tuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tuo *TransactionUpdateOne) AddDeletedAt(u int32) *TransactionUpdateOne {
	tuo.mutation.AddDeletedAt(u)
	return tuo
}

// SetPoolID sets the "pool_id" field.
func (tuo *TransactionUpdateOne) SetPoolID(u uint64) *TransactionUpdateOne {
	tuo.mutation.ResetPoolID()
	tuo.mutation.SetPoolID(u)
	return tuo
}

// AddPoolID adds u to the "pool_id" field.
func (tuo *TransactionUpdateOne) AddPoolID(u int64) *TransactionUpdateOne {
	tuo.mutation.AddPoolID(u)
	return tuo
}

// SetTransactionID sets the "transaction_id" field.
func (tuo *TransactionUpdateOne) SetTransactionID(u uint64) *TransactionUpdateOne {
	tuo.mutation.ResetTransactionID()
	tuo.mutation.SetTransactionID(u)
	return tuo
}

// AddTransactionID adds u to the "transaction_id" field.
func (tuo *TransactionUpdateOne) AddTransactionID(u int64) *TransactionUpdateOne {
	tuo.mutation.AddTransactionID(u)
	return tuo
}

// SetTransactionType sets the "transaction_type" field.
func (tuo *TransactionUpdateOne) SetTransactionType(s string) *TransactionUpdateOne {
	tuo.mutation.SetTransactionType(s)
	return tuo
}

// SetChainID sets the "chain_id" field.
func (tuo *TransactionUpdateOne) SetChainID(s string) *TransactionUpdateOne {
	tuo.mutation.SetChainID(s)
	return tuo
}

// SetOwner sets the "owner" field.
func (tuo *TransactionUpdateOne) SetOwner(s string) *TransactionUpdateOne {
	tuo.mutation.SetOwner(s)
	return tuo
}

// SetAmountZeroIn sets the "amount_zero_in" field.
func (tuo *TransactionUpdateOne) SetAmountZeroIn(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetAmountZeroIn()
	tuo.mutation.SetAmountZeroIn(f)
	return tuo
}

// AddAmountZeroIn adds f to the "amount_zero_in" field.
func (tuo *TransactionUpdateOne) AddAmountZeroIn(f float64) *TransactionUpdateOne {
	tuo.mutation.AddAmountZeroIn(f)
	return tuo
}

// SetAmountOneIn sets the "amount_one_in" field.
func (tuo *TransactionUpdateOne) SetAmountOneIn(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetAmountOneIn()
	tuo.mutation.SetAmountOneIn(f)
	return tuo
}

// AddAmountOneIn adds f to the "amount_one_in" field.
func (tuo *TransactionUpdateOne) AddAmountOneIn(f float64) *TransactionUpdateOne {
	tuo.mutation.AddAmountOneIn(f)
	return tuo
}

// SetAmountZeroOut sets the "amount_zero_out" field.
func (tuo *TransactionUpdateOne) SetAmountZeroOut(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetAmountZeroOut()
	tuo.mutation.SetAmountZeroOut(f)
	return tuo
}

// AddAmountZeroOut adds f to the "amount_zero_out" field.
func (tuo *TransactionUpdateOne) AddAmountZeroOut(f float64) *TransactionUpdateOne {
	tuo.mutation.AddAmountZeroOut(f)
	return tuo
}

// SetAmountOneOut sets the "amount_one_out" field.
func (tuo *TransactionUpdateOne) SetAmountOneOut(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetAmountOneOut()
	tuo.mutation.SetAmountOneOut(f)
	return tuo
}

// AddAmountOneOut adds f to the "amount_one_out" field.
func (tuo *TransactionUpdateOne) AddAmountOneOut(f float64) *TransactionUpdateOne {
	tuo.mutation.AddAmountOneOut(f)
	return tuo
}

// SetTimestamp sets the "timestamp" field.
func (tuo *TransactionUpdateOne) SetTimestamp(u uint32) *TransactionUpdateOne {
	tuo.mutation.ResetTimestamp()
	tuo.mutation.SetTimestamp(u)
	return tuo
}

// AddTimestamp adds u to the "timestamp" field.
func (tuo *TransactionUpdateOne) AddTimestamp(u int32) *TransactionUpdateOne {
	tuo.mutation.AddTimestamp(u)
	return tuo
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	var (
		err  error
		node *Transaction
	)
	if err := tuo.defaults(); err != nil {
		return nil, err
	}
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Transaction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TransactionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TransactionUpdateOne) defaults() error {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		if transaction.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized transaction.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := transaction.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TransactionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransactionUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: transaction.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldCreatedAt,
		})
	}
	if value, ok := tuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldCreatedAt,
		})
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldUpdatedAt,
		})
	}
	if value, ok := tuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldUpdatedAt,
		})
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldDeletedAt,
		})
	}
	if value, ok := tuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldDeletedAt,
		})
	}
	if value, ok := tuo.mutation.PoolID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transaction.FieldPoolID,
		})
	}
	if value, ok := tuo.mutation.AddedPoolID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transaction.FieldPoolID,
		})
	}
	if value, ok := tuo.mutation.TransactionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transaction.FieldTransactionID,
		})
	}
	if value, ok := tuo.mutation.AddedTransactionID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transaction.FieldTransactionID,
		})
	}
	if value, ok := tuo.mutation.TransactionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldTransactionType,
		})
	}
	if value, ok := tuo.mutation.ChainID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldChainID,
		})
	}
	if value, ok := tuo.mutation.Owner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldOwner,
		})
	}
	if value, ok := tuo.mutation.AmountZeroIn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountZeroIn,
		})
	}
	if value, ok := tuo.mutation.AddedAmountZeroIn(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountZeroIn,
		})
	}
	if value, ok := tuo.mutation.AmountOneIn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountOneIn,
		})
	}
	if value, ok := tuo.mutation.AddedAmountOneIn(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountOneIn,
		})
	}
	if value, ok := tuo.mutation.AmountZeroOut(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountZeroOut,
		})
	}
	if value, ok := tuo.mutation.AddedAmountZeroOut(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountZeroOut,
		})
	}
	if value, ok := tuo.mutation.AmountOneOut(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountOneOut,
		})
	}
	if value, ok := tuo.mutation.AddedAmountOneOut(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldAmountOneOut,
		})
	}
	if value, ok := tuo.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldTimestamp,
		})
	}
	if value, ok := tuo.mutation.AddedTimestamp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldTimestamp,
		})
	}
	_spec.Modifiers = tuo.modifiers
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
