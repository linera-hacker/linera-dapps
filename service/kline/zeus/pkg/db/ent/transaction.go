// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/transaction"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// PoolID holds the value of the "pool_id" field.
	PoolID uint64 `json:"pool_id,omitempty"`
	// TransactionID holds the value of the "transaction_id" field.
	TransactionID uint64 `json:"transaction_id,omitempty"`
	// TransactionType holds the value of the "transaction_type" field.
	TransactionType string `json:"transaction_type,omitempty"`
	// ChainID holds the value of the "chain_id" field.
	ChainID string `json:"chain_id,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// AmountZeroIn holds the value of the "amount_zero_in" field.
	AmountZeroIn float64 `json:"amount_zero_in,omitempty"`
	// AmountOneIn holds the value of the "amount_one_in" field.
	AmountOneIn float64 `json:"amount_one_in,omitempty"`
	// AmountZeroOut holds the value of the "amount_zero_out" field.
	AmountZeroOut float64 `json:"amount_zero_out,omitempty"`
	// AmountOneOut holds the value of the "amount_one_out" field.
	AmountOneOut float64 `json:"amount_one_out,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp uint32 `json:"timestamp,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldAmountZeroIn, transaction.FieldAmountOneIn, transaction.FieldAmountZeroOut, transaction.FieldAmountOneOut:
			values[i] = new(sql.NullFloat64)
		case transaction.FieldID, transaction.FieldCreatedAt, transaction.FieldUpdatedAt, transaction.FieldDeletedAt, transaction.FieldPoolID, transaction.FieldTransactionID, transaction.FieldTimestamp:
			values[i] = new(sql.NullInt64)
		case transaction.FieldTransactionType, transaction.FieldChainID, transaction.FieldOwner:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Transaction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = uint32(value.Int64)
		case transaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = uint32(value.Int64)
			}
		case transaction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = uint32(value.Int64)
			}
		case transaction.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				t.DeletedAt = uint32(value.Int64)
			}
		case transaction.FieldPoolID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pool_id", values[i])
			} else if value.Valid {
				t.PoolID = uint64(value.Int64)
			}
		case transaction.FieldTransactionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_id", values[i])
			} else if value.Valid {
				t.TransactionID = uint64(value.Int64)
			}
		case transaction.FieldTransactionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_type", values[i])
			} else if value.Valid {
				t.TransactionType = value.String
			}
		case transaction.FieldChainID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain_id", values[i])
			} else if value.Valid {
				t.ChainID = value.String
			}
		case transaction.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				t.Owner = value.String
			}
		case transaction.FieldAmountZeroIn:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount_zero_in", values[i])
			} else if value.Valid {
				t.AmountZeroIn = value.Float64
			}
		case transaction.FieldAmountOneIn:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount_one_in", values[i])
			} else if value.Valid {
				t.AmountOneIn = value.Float64
			}
		case transaction.FieldAmountZeroOut:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount_zero_out", values[i])
			} else if value.Valid {
				t.AmountZeroOut = value.Float64
			}
		case transaction.FieldAmountOneOut:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount_one_out", values[i])
			} else if value.Valid {
				t.AmountOneOut = value.Float64
			}
		case transaction.FieldTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				t.Timestamp = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return (&TransactionClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", t.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", t.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", t.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("pool_id=")
	builder.WriteString(fmt.Sprintf("%v", t.PoolID))
	builder.WriteString(", ")
	builder.WriteString("transaction_id=")
	builder.WriteString(fmt.Sprintf("%v", t.TransactionID))
	builder.WriteString(", ")
	builder.WriteString("transaction_type=")
	builder.WriteString(t.TransactionType)
	builder.WriteString(", ")
	builder.WriteString("chain_id=")
	builder.WriteString(t.ChainID)
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(t.Owner)
	builder.WriteString(", ")
	builder.WriteString("amount_zero_in=")
	builder.WriteString(fmt.Sprintf("%v", t.AmountZeroIn))
	builder.WriteString(", ")
	builder.WriteString("amount_one_in=")
	builder.WriteString(fmt.Sprintf("%v", t.AmountOneIn))
	builder.WriteString(", ")
	builder.WriteString("amount_zero_out=")
	builder.WriteString(fmt.Sprintf("%v", t.AmountZeroOut))
	builder.WriteString(", ")
	builder.WriteString("amount_one_out=")
	builder.WriteString(fmt.Sprintf("%v", t.AmountOneOut))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(fmt.Sprintf("%v", t.Timestamp))
	builder.WriteByte(')')
	return builder.String()
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction

func (t Transactions) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
