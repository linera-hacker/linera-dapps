pipeline {
  agent any
  environment {
    GOPROXY = 'https://goproxy.cn,direct'
  }
  tools {
    go 'go'
  }
  stages {
    stage('Clone') {
      steps {
        git(url: scm.userRemoteConfigs[0].url, branch: '$BRANCH_NAME', changelog: true, credentialsId: 'KK-github-key', poll: true)
      }
    }

    stage('Generate docker image for feature') {
      when {
        expression { BUILD_TARGET == 'true' }
        expression { BRANCH_NAME != 'master' }
      }
      steps {
        sh(returnStdout: false, script: '''
          cd service/kline/build
          export all_proxy=$ALL_PROXY
          export ENV_GO_DOWNLOAD_URL=$ENV_GO_DOWNLOAD_URL
          export GO_DOWNLOAD_URL=$ENV_GO_DOWNLOAD_URL
          feature_name=`echo $BRANCH_NAME | awk -F '/' '{ print $2 }'`
          sed -i "s#UBUNTU2004_DOCKER_REGISTRY_URL#$UBUNTU2004_DOCKER_REGISTRY_URL#g" Dockerfile
          bash build-docker $BRANCH_NAME $feature_name
        '''.stripIndent())
      }
    }

    stage('Generate docker image for development') {
      when {
        expression { BUILD_TARGET == 'true' }
        expression { BRANCH_NAME == 'master' }
      }
      steps {
        sh(returnStdout: false, script: '''
          cd service/kline/build
          export all_proxy=$ALL_PROXY
          export ENV_GO_DOWNLOAD_URL=$ENV_GO_DOWNLOAD_URL
          export GO_DOWNLOAD_URL=$ENV_GO_DOWNLOAD_URL
          sed -i "s#UBUNTU2004_DOCKER_REGISTRY_URL#$UBUNTU2004_DOCKER_REGISTRY_URL#g" Dockerfile
          bash build-docker $BRANCH_NAME latest
        '''.stripIndent())
      }
    }

    stage('Tag patch') {
      when {
        expression { TAG_PATCH == 'true' }
      }
      steps {
        sh(returnStdout: false, script: '''
          set +e
          revlist=`git rev-list --tags --max-count=1`
          rc=$?
          set -e
          if [ 0 -eq $rc -a x"$revlist" != x ]; then
            tag=`git describe --tags $revlist`

            major=`echo $tag | awk -F '.' '{ print $1 }'`
            minor=`echo $tag | awk -F '.' '{ print $2 }'`
            patch=`echo $tag | awk -F '.' '{ print $3 }'`

            case $TAG_FOR in
              testing)
                patch=$(( $patch + $patch % 2 + 1 ))
                ;;
              production)
                patch=$(( $patch + 1 ))
                git reset --hard
                git checkout $tag
                ;;
            esac

            tag=$major.$minor.$patch
          else
            tag=0.1.1
          fi
          git tag -a $tag -m "Bump version to $tag"
        '''.stripIndent())

        withCredentials([gitUsernamePassword(credentialsId: 'KK-github-key', gitToolName: 'git-tool')]) {
          sh 'git push --tag'
        }
      }
    }

    stage('Tag minor') {
      when {
        expression { TAG_MINOR == 'true' }
      }
      steps {
        sh(returnStdout: false, script: '''
          set +e
          revlist=`git rev-list --tags --max-count=1`
          rc=$?
          set -e
          if [ 0 -eq $rc -a x"$revlist" != x ]; then
            tag=`git describe --tags $revlist`

            major=`echo $tag | awk -F '.' '{ print $1 }'`
            minor=`echo $tag | awk -F '.' '{ print $2 }'`
            patch=`echo $tag | awk -F '.' '{ print $3 }'`

            minor=$(( $minor + 1 ))
            patch=1

            tag=$major.$minor.$patch
          else
            tag=0.1.1
          fi
          git tag -a $tag -m "Bump version to $tag"
        '''.stripIndent())

        withCredentials([gitUsernamePassword(credentialsId: 'KK-github-key', gitToolName: 'git-tool')]) {
          sh 'git push --tag'
        }
      }
    }

    stage('Tag major') {
      when {
        expression { TAG_MAJOR == 'true' }
      }
      steps {
        sh(returnStdout: false, script: '''
          set +e
          revlist=`git rev-list --tags --max-count=1`
          rc=$?
          set -e
          if [ 0 -eq $rc -a x"$revlist" != x ]; then
            tag=`git describe --tags $revlist`

            major=`echo $tag | awk -F '.' '{ print $1 }'`
            minor=`echo $tag | awk -F '.' '{ print $2 }'`
            patch=`echo $tag | awk -F '.' '{ print $3 }'`

            major=$(( $major + 1 ))
            minor=0
            patch=1

            tag=$major.$minor.$patch
          else
            tag=0.1.1
          fi
          git tag -a $tag -m "Bump version to $tag"
        '''.stripIndent())

        withCredentials([gitUsernamePassword(credentialsId: 'KK-github-key', gitToolName: 'git-tool')]) {
          sh 'git push --tag'
        }
      }
    }

    stage('Generate docker image for testing or production') {
      when {
        expression { BUILD_TARGET == 'true' }
      }
      steps {
        sh(returnStdout: false, script: '''
          set +e
          revlist=`git rev-list --tags --max-count=1`
          rc=$?
          set -e
          if [ 0 -eq $rc -a x"$revlist" != x ]; then
            tag=`git describe --tags $revlist`
            git reset --hard
            git checkout $tag
          fi
        '''.stripIndent())

        sh(returnStdout: false, script: '''
          cd service/kline/build
          export all_proxy=$ALL_PROXY
          export ENV_GO_DOWNLOAD_URL=$ENV_GO_DOWNLOAD_URL
          export GO_DOWNLOAD_URL=$ENV_GO_DOWNLOAD_URL
          sed -i "s#UBUNTU2004_DOCKER_REGISTRY_URL#$UBUNTU2004_DOCKER_REGISTRY_URL#g" Dockerfile
          bash build-docker $tag $tag
        '''.stripIndent())
      }
    }

    stage('Release docker image for development') {
      when {
        expression { RELEASE_TARGET == 'true' }
      }
      steps {
        sh(returnStdout: false, script: '''
          branch=latest
          if [ "x$BRANCH_NAME" != "xmaster" ]; then
            branch=`echo $BRANCH_NAME | awk -F '/' '{ print $2 }'`
          fi
          set +e
          docker images | grep kline-service | grep $branch
          rc=$?
          set -e
          if [ 0 -eq $rc ]; then
            DOCKER_REGISTRY=$DOCKER_REGISTRY make release-docker-images
          fi
          images=`docker images | grep entropypool | grep kline-service | grep none | awk '{ print $3 }'`
          for image in $images; do
            docker rmi $image -f
          done
        '''.stripIndent())
      }
    }

    stage('Release docker image for testing') {
      when {
        expression { RELEASE_TARGET == 'true' }
      }
      steps {
        sh(returnStdout: false, script: '''
          set +e
          revlist=`git rev-list --tags --max-count=1`
          rc=$?
          set -e

          if [ 0 -eq $rc -a x"$revlist" != x ]; then
            tag=`git tag --sort=-v:refname | grep [1\\|3\\|5\\|7\\|9]$ | head -n1`
            set +e
            docker images | grep kline-service | grep $tag
            rc=$?
            set -e
            if [ 0 -eq $rc ]; then
              DOCKER_REGISTRY=$DOCKER_REGISTRY make release-docker-images
            fi
          fi
        '''.stripIndent())
      }
    }

    stage('Release docker image for production') {
      when {
        expression { RELEASE_TARGET == 'true' }
      }
      steps {
        sh(returnStdout: false, script: '''
          set +e
          taglist=`git rev-list --tags`
          rc=$?
          set -e

          if [ 0 -eq $rc -a x"$taglist" != x ]; then
            tag=`git tag --sort=-v:refname | grep [0\\|2\\|4\\|6\\|8]$ | head -n1`
            set +e
            docker images | grep kline-service | grep $tag
            rc=$?
            set -e
            if [ 0 -eq $rc ]; then
              DOCKER_REGISTRY=$DOCKER_REGISTRY make release-docker-images
            fi
          fi
        '''.stripIndent())
      }
    }

    stage('Deploy for development') {
      when {
        expression { DEPLOY_TARGET == 'true' }
        expression { TARGET_ENV ==~ /.*development.*/ }
      }
      steps {
        sh(returnStdout: false, script: '''
          branch=latest
          if [ "x$BRANCH_NAME" != "xmaster" ]; then
            branch=`echo $BRANCH_NAME | awk -F '/' '{ print $2 }'`
          fi
          sed -i "s/kline-service:latest/kline-service:$branch/g" cmd/kline-service/k8s/01-kline-service.yaml
          sed -i "s/DOCKER_REGISTRY/$DOCKER_REGISTRY/g" cmd/kline-service/k8s/01-kline-service.yaml
          if [ "x$REPLICAS_COUNT" == "x" ];then
            REPLICAS_COUNT=2
          fi
          sed -i "s/replicas: 2/replicas: $REPLICAS_COUNT/g" cmd/kline-service/k8s/01-kline-service.yaml
          make deploy-to-k8s-cluster
        '''.stripIndent())
      }
    }

    stage('Deploy for testing') {
      when {
        expression { DEPLOY_TARGET == 'true' }
        expression { TARGET_ENV ==~ /.*testing.*/ }
      }
      steps {
        sh(returnStdout: false, script: '''
          set +e
          revlist=`git rev-list --tags --max-count=1`
          rc=$?
          set -e
          if [ ! 0 -eq $rc -o x"$revlist" == x]; then
            exit 0
          fi
          tag=`git tag --sort=-v:refname | grep [1\\|3\\|5\\|7\\|9]$ | head -n1`

          git reset --hard
          git checkout $tag
          sed -i "s/kline-service:latest/kline-service:$tag/g" cmd/kline-service/k8s/01-kline-service.yaml
          sed -i "s/DOCKER_REGISTRY/$DOCKER_REGISTRY/g" cmd/kline-service/k8s/01-kline-service.yaml
          if [ "x$REPLICAS_COUNT" == "x" ];then
            REPLICAS_COUNT=2
          fi
          sed -i "s/replicas: 2/replicas: $REPLICAS_COUNT/g" cmd/kline-service/k8s/01-kline-service.yaml
          sed -i "s/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g" cmd/kline-service/k8s/01-kline-service.yaml
          make deploy-to-k8s-cluster
        '''.stripIndent())
      }
    }

    stage('Deploy for production') {
      when {
        expression { DEPLOY_TARGET == 'true' }
        expression { TARGET_ENV ==~ /.*production.*/ }
      }
      steps {
        sh(returnStdout: false, script: '''
          set +e
          taglist=`git rev-list --tags`
          rc=$?
          set -e
          if [ ! 0 -eq $rc -o x"$revlist" == x]; then
            exit 0
          fi
          tag=`git tag --sort=-v:refname | grep [0\\|2\\|4\\|6\\|8]$ | head -n1`
          git reset --hard
          git checkout $tag
          sed -i "s/kline-service:latest/kline-service:$tag/g" cmd/kline-service/k8s/01-kline-service.yaml
          sed -i "s/DOCKER_REGISTRY/$DOCKER_REGISTRY/g" cmd/kline-service/k8s/01-kline-service.yaml
          if [ "x$REPLICAS_COUNT" == "x" ];then
            REPLICAS_COUNT=2
          fi
          sed -i "s/replicas: 2/replicas: $REPLICAS_COUNT/g" cmd/kline-service/k8s/01-kline-service.yaml
          sed -i "s/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g" cmd/kline-service/k8s/01-kline-service.yaml
          make deploy-to-k8s-cluster
        '''.stripIndent())
      }
    }

    stage('Post') {
      steps {
        // Assemble vet and lint info.
        // warnings parserConfigurations: [
        //   [pattern: 'govet.txt', parserName: 'Go Vet'],
        //   [pattern: 'golint.txt', parserName: 'Go Lint']
        // ]

        // sh 'go2xunit -fail -input gotest.txt -output gotest.xml'
        // junit "gotest.xml"
        sh 'echo Posting'
      }
    }
  }
  post('Report') {
    fixed {
      script {
        sh(script: 'bash $JENKINS_HOME/wechat-templates/send_wxmsg.sh fixed')
     }
      script {
        // env.ForEmailPlugin = env.WORKSPACE
        emailext attachmentsPattern: 'TestResults\\*.trx',
        body: '${FILE,path="$JENKINS_HOME/email-templates/success_email_tmp.html"}',
        mimeType: 'text/html',
        subject: currentBuild.currentResult + " : " + env.JOB_NAME,
        to: '$DEFAULT_RECIPIENTS'
      }
     }
    success {
      script {
        sh(script: 'bash $JENKINS_HOME/wechat-templates/send_wxmsg.sh successful')
     }
      script {
        // env.ForEmailPlugin = env.WORKSPACE
        emailext attachmentsPattern: 'TestResults\\*.trx',
        body: '${FILE,path="$JENKINS_HOME/email-templates/success_email_tmp.html"}',
        mimeType: 'text/html',
        subject: currentBuild.currentResult + " : " + env.JOB_NAME,
        to: '$DEFAULT_RECIPIENTS'
      }
     }
    failure {
      script {
        sh(script: 'bash $JENKINS_HOME/wechat-templates/send_wxmsg.sh failure')
     }
      script {
        // env.ForEmailPlugin = env.WORKSPACE
        emailext attachmentsPattern: 'TestResults\\*.trx',
        body: '${FILE,path="$JENKINS_HOME/email-templates/fail_email_tmp.html"}',
        mimeType: 'text/html',
        subject: currentBuild.currentResult + " : " + env.JOB_NAME,
        to: '$DEFAULT_RECIPIENTS'
      }
     }
    aborted {
      script {
        sh(script: 'bash $JENKINS_HOME/wechat-templates/send_wxmsg.sh aborted')
     }
      script {
        // env.ForEmailPlugin = env.WORKSPACE
        emailext attachmentsPattern: 'TestResults\\*.trx',
        body: '${FILE,path="$JENKINS_HOME/email-templates/fail_email_tmp.html"}',
        mimeType: 'text/html',
        subject: currentBuild.currentResult + " : " + env.JOB_NAME,
        to: '$DEFAULT_RECIPIENTS'
      }
     }
  }
}
