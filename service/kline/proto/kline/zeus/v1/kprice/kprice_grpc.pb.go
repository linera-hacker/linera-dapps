// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: kline/zeus/v1/kprice/kprice.proto

package kprice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateKPrice(ctx context.Context, in *CreateKPriceRequest, opts ...grpc.CallOption) (*CreateKPriceResponse, error)
	UpdateKPrice(ctx context.Context, in *UpdateKPriceRequest, opts ...grpc.CallOption) (*UpdateKPriceResponse, error)
	GetKPrice(ctx context.Context, in *GetKPriceRequest, opts ...grpc.CallOption) (*GetKPriceResponse, error)
	GetKPrices(ctx context.Context, in *GetKPricesRequest, opts ...grpc.CallOption) (*GetKPricesResponse, error)
	ExistKPrice(ctx context.Context, in *ExistKPriceRequest, opts ...grpc.CallOption) (*ExistKPriceResponse, error)
	ExistKPriceConds(ctx context.Context, in *ExistKPriceCondsRequest, opts ...grpc.CallOption) (*ExistKPriceCondsResponse, error)
	DeleteKPrice(ctx context.Context, in *DeleteKPriceRequest, opts ...grpc.CallOption) (*DeleteKPriceResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateKPrice(ctx context.Context, in *CreateKPriceRequest, opts ...grpc.CallOption) (*CreateKPriceResponse, error) {
	out := new(CreateKPriceResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kprice.Manager/CreateKPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateKPrice(ctx context.Context, in *UpdateKPriceRequest, opts ...grpc.CallOption) (*UpdateKPriceResponse, error) {
	out := new(UpdateKPriceResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kprice.Manager/UpdateKPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetKPrice(ctx context.Context, in *GetKPriceRequest, opts ...grpc.CallOption) (*GetKPriceResponse, error) {
	out := new(GetKPriceResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kprice.Manager/GetKPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetKPrices(ctx context.Context, in *GetKPricesRequest, opts ...grpc.CallOption) (*GetKPricesResponse, error) {
	out := new(GetKPricesResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kprice.Manager/GetKPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistKPrice(ctx context.Context, in *ExistKPriceRequest, opts ...grpc.CallOption) (*ExistKPriceResponse, error) {
	out := new(ExistKPriceResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kprice.Manager/ExistKPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistKPriceConds(ctx context.Context, in *ExistKPriceCondsRequest, opts ...grpc.CallOption) (*ExistKPriceCondsResponse, error) {
	out := new(ExistKPriceCondsResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kprice.Manager/ExistKPriceConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteKPrice(ctx context.Context, in *DeleteKPriceRequest, opts ...grpc.CallOption) (*DeleteKPriceResponse, error) {
	out := new(DeleteKPriceResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kprice.Manager/DeleteKPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateKPrice(context.Context, *CreateKPriceRequest) (*CreateKPriceResponse, error)
	UpdateKPrice(context.Context, *UpdateKPriceRequest) (*UpdateKPriceResponse, error)
	GetKPrice(context.Context, *GetKPriceRequest) (*GetKPriceResponse, error)
	GetKPrices(context.Context, *GetKPricesRequest) (*GetKPricesResponse, error)
	ExistKPrice(context.Context, *ExistKPriceRequest) (*ExistKPriceResponse, error)
	ExistKPriceConds(context.Context, *ExistKPriceCondsRequest) (*ExistKPriceCondsResponse, error)
	DeleteKPrice(context.Context, *DeleteKPriceRequest) (*DeleteKPriceResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateKPrice(context.Context, *CreateKPriceRequest) (*CreateKPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKPrice not implemented")
}
func (UnimplementedManagerServer) UpdateKPrice(context.Context, *UpdateKPriceRequest) (*UpdateKPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKPrice not implemented")
}
func (UnimplementedManagerServer) GetKPrice(context.Context, *GetKPriceRequest) (*GetKPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKPrice not implemented")
}
func (UnimplementedManagerServer) GetKPrices(context.Context, *GetKPricesRequest) (*GetKPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKPrices not implemented")
}
func (UnimplementedManagerServer) ExistKPrice(context.Context, *ExistKPriceRequest) (*ExistKPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistKPrice not implemented")
}
func (UnimplementedManagerServer) ExistKPriceConds(context.Context, *ExistKPriceCondsRequest) (*ExistKPriceCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistKPriceConds not implemented")
}
func (UnimplementedManagerServer) DeleteKPrice(context.Context, *DeleteKPriceRequest) (*DeleteKPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKPrice not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateKPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateKPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kprice.Manager/CreateKPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateKPrice(ctx, req.(*CreateKPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateKPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateKPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kprice.Manager/UpdateKPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateKPrice(ctx, req.(*UpdateKPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetKPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetKPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kprice.Manager/GetKPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetKPrice(ctx, req.(*GetKPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetKPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetKPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kprice.Manager/GetKPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetKPrices(ctx, req.(*GetKPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistKPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistKPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistKPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kprice.Manager/ExistKPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistKPrice(ctx, req.(*ExistKPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistKPriceConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistKPriceCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistKPriceConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kprice.Manager/ExistKPriceConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistKPriceConds(ctx, req.(*ExistKPriceCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteKPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteKPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kprice.Manager/DeleteKPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteKPrice(ctx, req.(*DeleteKPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kline.v1.kprice.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKPrice",
			Handler:    _Manager_CreateKPrice_Handler,
		},
		{
			MethodName: "UpdateKPrice",
			Handler:    _Manager_UpdateKPrice_Handler,
		},
		{
			MethodName: "GetKPrice",
			Handler:    _Manager_GetKPrice_Handler,
		},
		{
			MethodName: "GetKPrices",
			Handler:    _Manager_GetKPrices_Handler,
		},
		{
			MethodName: "ExistKPrice",
			Handler:    _Manager_ExistKPrice_Handler,
		},
		{
			MethodName: "ExistKPriceConds",
			Handler:    _Manager_ExistKPriceConds_Handler,
		},
		{
			MethodName: "DeleteKPrice",
			Handler:    _Manager_DeleteKPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kline/zeus/v1/kprice/kprice.proto",
}
