// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: kline/zeus/v1/kpoint/kpoint.proto

package kpoint

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateKPoint(ctx context.Context, in *CreateKPointRequest, opts ...grpc.CallOption) (*CreateKPointResponse, error)
	UpdateKPoint(ctx context.Context, in *UpdateKPointRequest, opts ...grpc.CallOption) (*UpdateKPointResponse, error)
	GetKPoint(ctx context.Context, in *GetKPointRequest, opts ...grpc.CallOption) (*GetKPointResponse, error)
	GetKPoints(ctx context.Context, in *GetKPointsRequest, opts ...grpc.CallOption) (*GetKPointsResponse, error)
	GetKPointsForLine(ctx context.Context, in *GetKPointsForLineRequest, opts ...grpc.CallOption) (*GetKPointsForLineResponse, error)
	GetKPointTypes(ctx context.Context, in *GetKPointTypesRequest, opts ...grpc.CallOption) (*GetKPointTypesResponse, error)
	ExistKPoint(ctx context.Context, in *ExistKPointRequest, opts ...grpc.CallOption) (*ExistKPointResponse, error)
	ExistKPointConds(ctx context.Context, in *ExistKPointCondsRequest, opts ...grpc.CallOption) (*ExistKPointCondsResponse, error)
	DeleteKPoint(ctx context.Context, in *DeleteKPointRequest, opts ...grpc.CallOption) (*DeleteKPointResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateKPoint(ctx context.Context, in *CreateKPointRequest, opts ...grpc.CallOption) (*CreateKPointResponse, error) {
	out := new(CreateKPointResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kpoint.Manager/CreateKPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateKPoint(ctx context.Context, in *UpdateKPointRequest, opts ...grpc.CallOption) (*UpdateKPointResponse, error) {
	out := new(UpdateKPointResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kpoint.Manager/UpdateKPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetKPoint(ctx context.Context, in *GetKPointRequest, opts ...grpc.CallOption) (*GetKPointResponse, error) {
	out := new(GetKPointResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kpoint.Manager/GetKPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetKPoints(ctx context.Context, in *GetKPointsRequest, opts ...grpc.CallOption) (*GetKPointsResponse, error) {
	out := new(GetKPointsResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kpoint.Manager/GetKPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetKPointsForLine(ctx context.Context, in *GetKPointsForLineRequest, opts ...grpc.CallOption) (*GetKPointsForLineResponse, error) {
	out := new(GetKPointsForLineResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kpoint.Manager/GetKPointsForLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetKPointTypes(ctx context.Context, in *GetKPointTypesRequest, opts ...grpc.CallOption) (*GetKPointTypesResponse, error) {
	out := new(GetKPointTypesResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kpoint.Manager/GetKPointTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistKPoint(ctx context.Context, in *ExistKPointRequest, opts ...grpc.CallOption) (*ExistKPointResponse, error) {
	out := new(ExistKPointResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kpoint.Manager/ExistKPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistKPointConds(ctx context.Context, in *ExistKPointCondsRequest, opts ...grpc.CallOption) (*ExistKPointCondsResponse, error) {
	out := new(ExistKPointCondsResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kpoint.Manager/ExistKPointConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteKPoint(ctx context.Context, in *DeleteKPointRequest, opts ...grpc.CallOption) (*DeleteKPointResponse, error) {
	out := new(DeleteKPointResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.kpoint.Manager/DeleteKPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateKPoint(context.Context, *CreateKPointRequest) (*CreateKPointResponse, error)
	UpdateKPoint(context.Context, *UpdateKPointRequest) (*UpdateKPointResponse, error)
	GetKPoint(context.Context, *GetKPointRequest) (*GetKPointResponse, error)
	GetKPoints(context.Context, *GetKPointsRequest) (*GetKPointsResponse, error)
	GetKPointsForLine(context.Context, *GetKPointsForLineRequest) (*GetKPointsForLineResponse, error)
	GetKPointTypes(context.Context, *GetKPointTypesRequest) (*GetKPointTypesResponse, error)
	ExistKPoint(context.Context, *ExistKPointRequest) (*ExistKPointResponse, error)
	ExistKPointConds(context.Context, *ExistKPointCondsRequest) (*ExistKPointCondsResponse, error)
	DeleteKPoint(context.Context, *DeleteKPointRequest) (*DeleteKPointResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateKPoint(context.Context, *CreateKPointRequest) (*CreateKPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKPoint not implemented")
}
func (UnimplementedManagerServer) UpdateKPoint(context.Context, *UpdateKPointRequest) (*UpdateKPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKPoint not implemented")
}
func (UnimplementedManagerServer) GetKPoint(context.Context, *GetKPointRequest) (*GetKPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKPoint not implemented")
}
func (UnimplementedManagerServer) GetKPoints(context.Context, *GetKPointsRequest) (*GetKPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKPoints not implemented")
}
func (UnimplementedManagerServer) GetKPointsForLine(context.Context, *GetKPointsForLineRequest) (*GetKPointsForLineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKPointsForLine not implemented")
}
func (UnimplementedManagerServer) GetKPointTypes(context.Context, *GetKPointTypesRequest) (*GetKPointTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKPointTypes not implemented")
}
func (UnimplementedManagerServer) ExistKPoint(context.Context, *ExistKPointRequest) (*ExistKPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistKPoint not implemented")
}
func (UnimplementedManagerServer) ExistKPointConds(context.Context, *ExistKPointCondsRequest) (*ExistKPointCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistKPointConds not implemented")
}
func (UnimplementedManagerServer) DeleteKPoint(context.Context, *DeleteKPointRequest) (*DeleteKPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKPoint not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateKPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateKPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kpoint.Manager/CreateKPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateKPoint(ctx, req.(*CreateKPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateKPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateKPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kpoint.Manager/UpdateKPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateKPoint(ctx, req.(*UpdateKPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetKPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetKPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kpoint.Manager/GetKPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetKPoint(ctx, req.(*GetKPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetKPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetKPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kpoint.Manager/GetKPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetKPoints(ctx, req.(*GetKPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetKPointsForLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKPointsForLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetKPointsForLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kpoint.Manager/GetKPointsForLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetKPointsForLine(ctx, req.(*GetKPointsForLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetKPointTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKPointTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetKPointTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kpoint.Manager/GetKPointTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetKPointTypes(ctx, req.(*GetKPointTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistKPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistKPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistKPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kpoint.Manager/ExistKPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistKPoint(ctx, req.(*ExistKPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistKPointConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistKPointCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistKPointConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kpoint.Manager/ExistKPointConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistKPointConds(ctx, req.(*ExistKPointCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteKPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteKPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.kpoint.Manager/DeleteKPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteKPoint(ctx, req.(*DeleteKPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kline.v1.kpoint.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKPoint",
			Handler:    _Manager_CreateKPoint_Handler,
		},
		{
			MethodName: "UpdateKPoint",
			Handler:    _Manager_UpdateKPoint_Handler,
		},
		{
			MethodName: "GetKPoint",
			Handler:    _Manager_GetKPoint_Handler,
		},
		{
			MethodName: "GetKPoints",
			Handler:    _Manager_GetKPoints_Handler,
		},
		{
			MethodName: "GetKPointsForLine",
			Handler:    _Manager_GetKPointsForLine_Handler,
		},
		{
			MethodName: "GetKPointTypes",
			Handler:    _Manager_GetKPointTypes_Handler,
		},
		{
			MethodName: "ExistKPoint",
			Handler:    _Manager_ExistKPoint_Handler,
		},
		{
			MethodName: "ExistKPointConds",
			Handler:    _Manager_ExistKPointConds_Handler,
		},
		{
			MethodName: "DeleteKPoint",
			Handler:    _Manager_DeleteKPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kline/zeus/v1/kpoint/kpoint.proto",
}
