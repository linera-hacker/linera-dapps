// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: kline/zeus/v1/tokenpair/tokenpair.proto

package tokenpair

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateTokenPair(ctx context.Context, in *CreateTokenPairRequest, opts ...grpc.CallOption) (*CreateTokenPairResponse, error)
	UpdateTokenPair(ctx context.Context, in *UpdateTokenPairRequest, opts ...grpc.CallOption) (*UpdateTokenPairResponse, error)
	GetTokenPair(ctx context.Context, in *GetTokenPairRequest, opts ...grpc.CallOption) (*GetTokenPairResponse, error)
	GetTokenPairs(ctx context.Context, in *GetTokenPairsRequest, opts ...grpc.CallOption) (*GetTokenPairsResponse, error)
	ExistTokenPair(ctx context.Context, in *ExistTokenPairRequest, opts ...grpc.CallOption) (*ExistTokenPairResponse, error)
	ExistTokenPairConds(ctx context.Context, in *ExistTokenPairCondsRequest, opts ...grpc.CallOption) (*ExistTokenPairCondsResponse, error)
	DeleteTokenPair(ctx context.Context, in *DeleteTokenPairRequest, opts ...grpc.CallOption) (*DeleteTokenPairResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateTokenPair(ctx context.Context, in *CreateTokenPairRequest, opts ...grpc.CallOption) (*CreateTokenPairResponse, error) {
	out := new(CreateTokenPairResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.tokenpaire.Manager/CreateTokenPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateTokenPair(ctx context.Context, in *UpdateTokenPairRequest, opts ...grpc.CallOption) (*UpdateTokenPairResponse, error) {
	out := new(UpdateTokenPairResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.tokenpaire.Manager/UpdateTokenPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetTokenPair(ctx context.Context, in *GetTokenPairRequest, opts ...grpc.CallOption) (*GetTokenPairResponse, error) {
	out := new(GetTokenPairResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.tokenpaire.Manager/GetTokenPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetTokenPairs(ctx context.Context, in *GetTokenPairsRequest, opts ...grpc.CallOption) (*GetTokenPairsResponse, error) {
	out := new(GetTokenPairsResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.tokenpaire.Manager/GetTokenPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistTokenPair(ctx context.Context, in *ExistTokenPairRequest, opts ...grpc.CallOption) (*ExistTokenPairResponse, error) {
	out := new(ExistTokenPairResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.tokenpaire.Manager/ExistTokenPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistTokenPairConds(ctx context.Context, in *ExistTokenPairCondsRequest, opts ...grpc.CallOption) (*ExistTokenPairCondsResponse, error) {
	out := new(ExistTokenPairCondsResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.tokenpaire.Manager/ExistTokenPairConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteTokenPair(ctx context.Context, in *DeleteTokenPairRequest, opts ...grpc.CallOption) (*DeleteTokenPairResponse, error) {
	out := new(DeleteTokenPairResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.tokenpaire.Manager/DeleteTokenPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateTokenPair(context.Context, *CreateTokenPairRequest) (*CreateTokenPairResponse, error)
	UpdateTokenPair(context.Context, *UpdateTokenPairRequest) (*UpdateTokenPairResponse, error)
	GetTokenPair(context.Context, *GetTokenPairRequest) (*GetTokenPairResponse, error)
	GetTokenPairs(context.Context, *GetTokenPairsRequest) (*GetTokenPairsResponse, error)
	ExistTokenPair(context.Context, *ExistTokenPairRequest) (*ExistTokenPairResponse, error)
	ExistTokenPairConds(context.Context, *ExistTokenPairCondsRequest) (*ExistTokenPairCondsResponse, error)
	DeleteTokenPair(context.Context, *DeleteTokenPairRequest) (*DeleteTokenPairResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateTokenPair(context.Context, *CreateTokenPairRequest) (*CreateTokenPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTokenPair not implemented")
}
func (UnimplementedManagerServer) UpdateTokenPair(context.Context, *UpdateTokenPairRequest) (*UpdateTokenPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTokenPair not implemented")
}
func (UnimplementedManagerServer) GetTokenPair(context.Context, *GetTokenPairRequest) (*GetTokenPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenPair not implemented")
}
func (UnimplementedManagerServer) GetTokenPairs(context.Context, *GetTokenPairsRequest) (*GetTokenPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenPairs not implemented")
}
func (UnimplementedManagerServer) ExistTokenPair(context.Context, *ExistTokenPairRequest) (*ExistTokenPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistTokenPair not implemented")
}
func (UnimplementedManagerServer) ExistTokenPairConds(context.Context, *ExistTokenPairCondsRequest) (*ExistTokenPairCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistTokenPairConds not implemented")
}
func (UnimplementedManagerServer) DeleteTokenPair(context.Context, *DeleteTokenPairRequest) (*DeleteTokenPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTokenPair not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateTokenPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateTokenPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.tokenpaire.Manager/CreateTokenPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateTokenPair(ctx, req.(*CreateTokenPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateTokenPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateTokenPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.tokenpaire.Manager/UpdateTokenPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateTokenPair(ctx, req.(*UpdateTokenPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetTokenPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetTokenPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.tokenpaire.Manager/GetTokenPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetTokenPair(ctx, req.(*GetTokenPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetTokenPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetTokenPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.tokenpaire.Manager/GetTokenPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetTokenPairs(ctx, req.(*GetTokenPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistTokenPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistTokenPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistTokenPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.tokenpaire.Manager/ExistTokenPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistTokenPair(ctx, req.(*ExistTokenPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistTokenPairConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistTokenPairCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistTokenPairConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.tokenpaire.Manager/ExistTokenPairConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistTokenPairConds(ctx, req.(*ExistTokenPairCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteTokenPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokenPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteTokenPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.tokenpaire.Manager/DeleteTokenPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteTokenPair(ctx, req.(*DeleteTokenPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kline.v1.tokenpaire.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTokenPair",
			Handler:    _Manager_CreateTokenPair_Handler,
		},
		{
			MethodName: "UpdateTokenPair",
			Handler:    _Manager_UpdateTokenPair_Handler,
		},
		{
			MethodName: "GetTokenPair",
			Handler:    _Manager_GetTokenPair_Handler,
		},
		{
			MethodName: "GetTokenPairs",
			Handler:    _Manager_GetTokenPairs_Handler,
		},
		{
			MethodName: "ExistTokenPair",
			Handler:    _Manager_ExistTokenPair_Handler,
		},
		{
			MethodName: "ExistTokenPairConds",
			Handler:    _Manager_ExistTokenPairConds_Handler,
		},
		{
			MethodName: "DeleteTokenPair",
			Handler:    _Manager_DeleteTokenPair_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kline/zeus/v1/tokenpair/tokenpair.proto",
}
