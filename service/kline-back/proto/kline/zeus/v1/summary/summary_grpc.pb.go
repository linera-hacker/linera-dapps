// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: kline/zeus/v1/summary/summary.proto

package summary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	GetTokenLastCond(ctx context.Context, in *GetTokenLastCondRequest, opts ...grpc.CallOption) (*GetTokenLastCondResponse, error)
	GetOneDayVolumn(ctx context.Context, in *GetOneDayVolumnRequest, opts ...grpc.CallOption) (*GetOneDayVolumnResponse, error)
	ExistToken(ctx context.Context, in *ExistTokenRequest, opts ...grpc.CallOption) (*ExistTokenResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) GetTokenLastCond(ctx context.Context, in *GetTokenLastCondRequest, opts ...grpc.CallOption) (*GetTokenLastCondResponse, error) {
	out := new(GetTokenLastCondResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.summary.Manager/GetTokenLastCond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetOneDayVolumn(ctx context.Context, in *GetOneDayVolumnRequest, opts ...grpc.CallOption) (*GetOneDayVolumnResponse, error) {
	out := new(GetOneDayVolumnResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.summary.Manager/GetOneDayVolumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistToken(ctx context.Context, in *ExistTokenRequest, opts ...grpc.CallOption) (*ExistTokenResponse, error) {
	out := new(ExistTokenResponse)
	err := c.cc.Invoke(ctx, "/kline.v1.summary.Manager/ExistToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	GetTokenLastCond(context.Context, *GetTokenLastCondRequest) (*GetTokenLastCondResponse, error)
	GetOneDayVolumn(context.Context, *GetOneDayVolumnRequest) (*GetOneDayVolumnResponse, error)
	ExistToken(context.Context, *ExistTokenRequest) (*ExistTokenResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) GetTokenLastCond(context.Context, *GetTokenLastCondRequest) (*GetTokenLastCondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenLastCond not implemented")
}
func (UnimplementedManagerServer) GetOneDayVolumn(context.Context, *GetOneDayVolumnRequest) (*GetOneDayVolumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneDayVolumn not implemented")
}
func (UnimplementedManagerServer) ExistToken(context.Context, *ExistTokenRequest) (*ExistTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistToken not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_GetTokenLastCond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenLastCondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetTokenLastCond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.summary.Manager/GetTokenLastCond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetTokenLastCond(ctx, req.(*GetTokenLastCondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetOneDayVolumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneDayVolumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetOneDayVolumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.summary.Manager/GetOneDayVolumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetOneDayVolumn(ctx, req.(*GetOneDayVolumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kline.v1.summary.Manager/ExistToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistToken(ctx, req.(*ExistTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kline.v1.summary.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokenLastCond",
			Handler:    _Manager_GetTokenLastCond_Handler,
		},
		{
			MethodName: "GetOneDayVolumn",
			Handler:    _Manager_GetOneDayVolumn_Handler,
		},
		{
			MethodName: "ExistToken",
			Handler:    _Manager_ExistToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kline/zeus/v1/summary/summary.proto",
}
