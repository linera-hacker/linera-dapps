// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: kline/zeus/v1/kpoint/kpoint.proto

package kpoint

import (
	kline "github.com/Geapefurit/kline-back/proto/kline"
	v1 "github.com/Geapefurit/kline-back/proto/kline/basetype/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KPointReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *uint32        `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	TokenPairID *uint32        `protobuf:"varint,20,opt,name=TokenPairID,proto3,oneof" json:"TokenPairID,omitempty"`
	KPointType  *v1.KPointType `protobuf:"varint,30,opt,name=KPointType,proto3,enum=basetype.KPointType,oneof" json:"KPointType,omitempty"`
	Open        *float64       `protobuf:"fixed64,40,opt,name=Open,proto3,oneof" json:"Open,omitempty"`
	High        *float64       `protobuf:"fixed64,50,opt,name=High,proto3,oneof" json:"High,omitempty"`
	Low         *float64       `protobuf:"fixed64,60,opt,name=Low,proto3,oneof" json:"Low,omitempty"`
	Close       *float64       `protobuf:"fixed64,70,opt,name=Close,proto3,oneof" json:"Close,omitempty"`
	StartTime   *uint32        `protobuf:"varint,80,opt,name=StartTime,proto3,oneof" json:"StartTime,omitempty"`
	EndTime     *uint32        `protobuf:"varint,90,opt,name=EndTime,proto3,oneof" json:"EndTime,omitempty"`
}

func (x *KPointReq) Reset() {
	*x = KPointReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPointReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPointReq) ProtoMessage() {}

func (x *KPointReq) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPointReq.ProtoReflect.Descriptor instead.
func (*KPointReq) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{0}
}

func (x *KPointReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *KPointReq) GetTokenPairID() uint32 {
	if x != nil && x.TokenPairID != nil {
		return *x.TokenPairID
	}
	return 0
}

func (x *KPointReq) GetKPointType() v1.KPointType {
	if x != nil && x.KPointType != nil {
		return *x.KPointType
	}
	return v1.KPointType(0)
}

func (x *KPointReq) GetOpen() float64 {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return 0
}

func (x *KPointReq) GetHigh() float64 {
	if x != nil && x.High != nil {
		return *x.High
	}
	return 0
}

func (x *KPointReq) GetLow() float64 {
	if x != nil && x.Low != nil {
		return *x.Low
	}
	return 0
}

func (x *KPointReq) GetClose() float64 {
	if x != nil && x.Close != nil {
		return *x.Close
	}
	return 0
}

func (x *KPointReq) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *KPointReq) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

type KPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"token_pair_id"
	TokenPairID uint32 `protobuf:"varint,20,opt,name=TokenPairID,proto3" json:"TokenPairID,omitempty" sql:"token_pair_id"`
	// @inject_tag: sql:"k_point_type"
	KPointTypeStr string        `protobuf:"bytes,30,opt,name=KPointTypeStr,proto3" json:"KPointTypeStr,omitempty" sql:"k_point_type"`
	KPointType    v1.KPointType `protobuf:"varint,31,opt,name=KPointType,proto3,enum=basetype.KPointType" json:"KPointType,omitempty"`
	// @inject_tag: sql:"open"
	Open float64 `protobuf:"fixed64,40,opt,name=Open,proto3" json:"Open,omitempty" sql:"open"`
	// @inject_tag: sql:"high"
	High float64 `protobuf:"fixed64,50,opt,name=High,proto3" json:"High,omitempty" sql:"high"`
	// @inject_tag: sql:"low"
	Low float64 `protobuf:"fixed64,60,opt,name=Low,proto3" json:"Low,omitempty" sql:"low"`
	// @inject_tag: sql:"close"
	Close float64 `protobuf:"fixed64,70,opt,name=Close,proto3" json:"Close,omitempty" sql:"close"`
	// @inject_tag: sql:"start_time"
	StartTime uint32 `protobuf:"varint,80,opt,name=StartTime,proto3" json:"StartTime,omitempty" sql:"start_time"`
	// @inject_tag: sql:"end_time"
	EndTime uint32 `protobuf:"varint,90,opt,name=EndTime,proto3" json:"EndTime,omitempty" sql:"end_time"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,190,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,200,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *KPoint) Reset() {
	*x = KPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPoint) ProtoMessage() {}

func (x *KPoint) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPoint.ProtoReflect.Descriptor instead.
func (*KPoint) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{1}
}

func (x *KPoint) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *KPoint) GetTokenPairID() uint32 {
	if x != nil {
		return x.TokenPairID
	}
	return 0
}

func (x *KPoint) GetKPointTypeStr() string {
	if x != nil {
		return x.KPointTypeStr
	}
	return ""
}

func (x *KPoint) GetKPointType() v1.KPointType {
	if x != nil {
		return x.KPointType
	}
	return v1.KPointType(0)
}

func (x *KPoint) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *KPoint) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *KPoint) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *KPoint) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *KPoint) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *KPoint) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *KPoint) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *KPoint) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *kline.Uint32Val     `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	TokenPairID *kline.Uint32Val     `protobuf:"bytes,20,opt,name=TokenPairID,proto3" json:"TokenPairID,omitempty"`
	KPointType  *kline.Uint32Val     `protobuf:"bytes,30,opt,name=KPointType,proto3" json:"KPointType,omitempty"`
	StartAt     *kline.Uint32Val     `protobuf:"bytes,40,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	EndAt       *kline.Uint32Val     `protobuf:"bytes,50,opt,name=EndAt,proto3" json:"EndAt,omitempty"`
	IDs         *kline.Int32SliceVal `protobuf:"bytes,190,opt,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *kline.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetTokenPairID() *kline.Uint32Val {
	if x != nil {
		return x.TokenPairID
	}
	return nil
}

func (x *Conds) GetKPointType() *kline.Uint32Val {
	if x != nil {
		return x.KPointType
	}
	return nil
}

func (x *Conds) GetStartAt() *kline.Uint32Val {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *Conds) GetEndAt() *kline.Uint32Val {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *Conds) GetIDs() *kline.Int32SliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

type CreateKPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *KPointReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateKPointRequest) Reset() {
	*x = CreateKPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKPointRequest) ProtoMessage() {}

func (x *CreateKPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKPointRequest.ProtoReflect.Descriptor instead.
func (*CreateKPointRequest) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{3}
}

func (x *CreateKPointRequest) GetInfo() *KPointReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateKPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *KPoint `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateKPointResponse) Reset() {
	*x = CreateKPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKPointResponse) ProtoMessage() {}

func (x *CreateKPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKPointResponse.ProtoReflect.Descriptor instead.
func (*CreateKPointResponse) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{4}
}

func (x *CreateKPointResponse) GetInfo() *KPoint {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetKPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetKPointRequest) Reset() {
	*x = GetKPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKPointRequest) ProtoMessage() {}

func (x *GetKPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKPointRequest.ProtoReflect.Descriptor instead.
func (*GetKPointRequest) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{5}
}

func (x *GetKPointRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type GetKPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *KPoint `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetKPointResponse) Reset() {
	*x = GetKPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKPointResponse) ProtoMessage() {}

func (x *GetKPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKPointResponse.ProtoReflect.Descriptor instead.
func (*GetKPointResponse) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{6}
}

func (x *GetKPointResponse) GetInfo() *KPoint {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetKPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetKPointsRequest) Reset() {
	*x = GetKPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKPointsRequest) ProtoMessage() {}

func (x *GetKPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKPointsRequest.ProtoReflect.Descriptor instead.
func (*GetKPointsRequest) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{7}
}

func (x *GetKPointsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetKPointsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetKPointsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetKPointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*KPoint `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32    `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetKPointsResponse) Reset() {
	*x = GetKPointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKPointsResponse) ProtoMessage() {}

func (x *GetKPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKPointsResponse.ProtoReflect.Descriptor instead.
func (*GetKPointsResponse) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{8}
}

func (x *GetKPointsResponse) GetInfos() []*KPoint {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetKPointsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type KPointTypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KPointType v1.KPointType `protobuf:"varint,10,opt,name=KPointType,proto3,enum=basetype.KPointType" json:"KPointType,omitempty"`
	ShortName  string        `protobuf:"bytes,20,opt,name=ShortName,proto3" json:"ShortName,omitempty"`
	Seconds    uint32        `protobuf:"varint,30,opt,name=Seconds,proto3" json:"Seconds,omitempty"`
}

func (x *KPointTypeInfo) Reset() {
	*x = KPointTypeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPointTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPointTypeInfo) ProtoMessage() {}

func (x *KPointTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPointTypeInfo.ProtoReflect.Descriptor instead.
func (*KPointTypeInfo) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{9}
}

func (x *KPointTypeInfo) GetKPointType() v1.KPointType {
	if x != nil {
		return x.KPointType
	}
	return v1.KPointType(0)
}

func (x *KPointTypeInfo) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *KPointTypeInfo) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type GetKPointTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetKPointTypesRequest) Reset() {
	*x = GetKPointTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKPointTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKPointTypesRequest) ProtoMessage() {}

func (x *GetKPointTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKPointTypesRequest.ProtoReflect.Descriptor instead.
func (*GetKPointTypesRequest) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{10}
}

type GetKPointTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*KPointTypeInfo `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetKPointTypesResponse) Reset() {
	*x = GetKPointTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKPointTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKPointTypesResponse) ProtoMessage() {}

func (x *GetKPointTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKPointTypesResponse.ProtoReflect.Descriptor instead.
func (*GetKPointTypesResponse) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{11}
}

func (x *GetKPointTypesResponse) GetInfos() []*KPointTypeInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type KPointForLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// open close low high
	Nums []float64 `protobuf:"fixed64,10,rep,packed,name=Nums,proto3" json:"Nums,omitempty"`
	// start time -> end time
	Times       []uint32 `protobuf:"varint,20,rep,packed,name=Times,proto3" json:"Times,omitempty"`
	FormatTimes []string `protobuf:"bytes,30,rep,name=FormatTimes,proto3" json:"FormatTimes,omitempty"`
}

func (x *KPointForLine) Reset() {
	*x = KPointForLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPointForLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPointForLine) ProtoMessage() {}

func (x *KPointForLine) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPointForLine.ProtoReflect.Descriptor instead.
func (*KPointForLine) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{12}
}

func (x *KPointForLine) GetNums() []float64 {
	if x != nil {
		return x.Nums
	}
	return nil
}

func (x *KPointForLine) GetTimes() []uint32 {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *KPointForLine) GetFormatTimes() []string {
	if x != nil {
		return x.FormatTimes
	}
	return nil
}

type GetKPointsForLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalTime uint32        `protobuf:"varint,10,opt,name=OriginalTime,proto3" json:"OriginalTime,omitempty"`
	KPointType   v1.KPointType `protobuf:"varint,20,opt,name=KPointType,proto3,enum=basetype.KPointType" json:"KPointType,omitempty"`
	TokenPairID  uint32        `protobuf:"varint,30,opt,name=TokenPairID,proto3" json:"TokenPairID,omitempty"`
	Offset       int32         `protobuf:"varint,40,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit        int32         `protobuf:"varint,50,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetKPointsForLineRequest) Reset() {
	*x = GetKPointsForLineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKPointsForLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKPointsForLineRequest) ProtoMessage() {}

func (x *GetKPointsForLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKPointsForLineRequest.ProtoReflect.Descriptor instead.
func (*GetKPointsForLineRequest) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{13}
}

func (x *GetKPointsForLineRequest) GetOriginalTime() uint32 {
	if x != nil {
		return x.OriginalTime
	}
	return 0
}

func (x *GetKPointsForLineRequest) GetKPointType() v1.KPointType {
	if x != nil {
		return x.KPointType
	}
	return v1.KPointType(0)
}

func (x *GetKPointsForLineRequest) GetTokenPairID() uint32 {
	if x != nil {
		return x.TokenPairID
	}
	return 0
}

func (x *GetKPointsForLineRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetKPointsForLineRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetKPointsForLineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalTime uint32           `protobuf:"varint,10,opt,name=OriginalTime,proto3" json:"OriginalTime,omitempty"`
	KPointType   v1.KPointType    `protobuf:"varint,20,opt,name=KPointType,proto3,enum=basetype.KPointType" json:"KPointType,omitempty"`
	TokenPairID  uint32           `protobuf:"varint,30,opt,name=TokenPairID,proto3" json:"TokenPairID,omitempty"`
	Offset       int32            `protobuf:"varint,40,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit        int32            `protobuf:"varint,50,opt,name=Limit,proto3" json:"Limit,omitempty"`
	KPoints      []*KPointForLine `protobuf:"bytes,60,rep,name=KPoints,proto3" json:"KPoints,omitempty"`
	Total        uint32           `protobuf:"varint,70,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetKPointsForLineResponse) Reset() {
	*x = GetKPointsForLineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKPointsForLineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKPointsForLineResponse) ProtoMessage() {}

func (x *GetKPointsForLineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKPointsForLineResponse.ProtoReflect.Descriptor instead.
func (*GetKPointsForLineResponse) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{14}
}

func (x *GetKPointsForLineResponse) GetOriginalTime() uint32 {
	if x != nil {
		return x.OriginalTime
	}
	return 0
}

func (x *GetKPointsForLineResponse) GetKPointType() v1.KPointType {
	if x != nil {
		return x.KPointType
	}
	return v1.KPointType(0)
}

func (x *GetKPointsForLineResponse) GetTokenPairID() uint32 {
	if x != nil {
		return x.TokenPairID
	}
	return 0
}

func (x *GetKPointsForLineResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetKPointsForLineResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetKPointsForLineResponse) GetKPoints() []*KPointForLine {
	if x != nil {
		return x.KPoints
	}
	return nil
}

func (x *GetKPointsForLineResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdateKPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *KPointReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateKPointRequest) Reset() {
	*x = UpdateKPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKPointRequest) ProtoMessage() {}

func (x *UpdateKPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKPointRequest.ProtoReflect.Descriptor instead.
func (*UpdateKPointRequest) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateKPointRequest) GetInfo() *KPointReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateKPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *KPoint `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateKPointResponse) Reset() {
	*x = UpdateKPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKPointResponse) ProtoMessage() {}

func (x *UpdateKPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKPointResponse.ProtoReflect.Descriptor instead.
func (*UpdateKPointResponse) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateKPointResponse) GetInfo() *KPoint {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistKPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistKPointRequest) Reset() {
	*x = ExistKPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistKPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistKPointRequest) ProtoMessage() {}

func (x *ExistKPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistKPointRequest.ProtoReflect.Descriptor instead.
func (*ExistKPointRequest) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{17}
}

func (x *ExistKPointRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type ExistKPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,10,opt,name=Exist,proto3" json:"Exist,omitempty"`
}

func (x *ExistKPointResponse) Reset() {
	*x = ExistKPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistKPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistKPointResponse) ProtoMessage() {}

func (x *ExistKPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistKPointResponse.ProtoReflect.Descriptor instead.
func (*ExistKPointResponse) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{18}
}

func (x *ExistKPointResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

type ExistKPointCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistKPointCondsRequest) Reset() {
	*x = ExistKPointCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistKPointCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistKPointCondsRequest) ProtoMessage() {}

func (x *ExistKPointCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistKPointCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistKPointCondsRequest) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{19}
}

func (x *ExistKPointCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistKPointCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,10,opt,name=Exist,proto3" json:"Exist,omitempty"`
}

func (x *ExistKPointCondsResponse) Reset() {
	*x = ExistKPointCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistKPointCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistKPointCondsResponse) ProtoMessage() {}

func (x *ExistKPointCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistKPointCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistKPointCondsResponse) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{20}
}

func (x *ExistKPointCondsResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

type DeleteKPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteKPointRequest) Reset() {
	*x = DeleteKPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKPointRequest) ProtoMessage() {}

func (x *DeleteKPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKPointRequest.ProtoReflect.Descriptor instead.
func (*DeleteKPointRequest) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteKPointRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type DeleteKPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *KPoint `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteKPointResponse) Reset() {
	*x = DeleteKPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKPointResponse) ProtoMessage() {}

func (x *DeleteKPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKPointResponse.ProtoReflect.Descriptor instead.
func (*DeleteKPointResponse) Descriptor() ([]byte, []int) {
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteKPointResponse) GetInfo() *KPoint {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_kline_zeus_v1_kpoint_kpoint_proto protoreflect.FileDescriptor

var file_kline_zeus_v1_kpoint_kpoint_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x7a, 0x65, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x03, 0x0a, 0x09, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x50, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52,
	0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x0a, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4b,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x0a, 0x4b, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4f, 0x70,
	0x65, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x04, 0x4f, 0x70, 0x65, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x48, 0x69, 0x67, 0x68, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x04, 0x52, 0x04, 0x48, 0x69, 0x67, 0x68, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x4c, 0x6f, 0x77, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x03, 0x4c, 0x6f, 0x77,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x06, 0x52, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x07, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x50, 0x61, 0x69, 0x72, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4b, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x4c, 0x6f, 0x77,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x06, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x4b, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x69, 0x67, 0x68, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x48, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x4c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x32, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x52, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x69,
	0x72, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x0a, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x52, 0x0a, 0x4b, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x26, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x49, 0x44, 0x73,
	0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x52, 0x03, 0x49,
	0x44, 0x73, 0x22, 0x45, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x43, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x22,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x40, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4b, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x7e, 0x0a, 0x0e, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0a, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x4b, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x5b, 0x0a, 0x0d, 0x4b, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x75, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x01, 0x52, 0x04, 0x4e, 0x75, 0x6d, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4b,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x4b, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x95,
	0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x0a, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x4b, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50,
	0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x45, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x43, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x24, 0x0a, 0x12, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x22, 0x2b, 0x0a, 0x13, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x17, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4b, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x30,
	0x0a, 0x18, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x22, 0x43, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xb3, 0x07, 0x0a,
	0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4b, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x6b, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4b, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x29, 0x2e, 0x6b, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x66,
	0x6f, 0x72, 0x2f, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4b,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x6b, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0b,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x6b, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x2e, 0x6b,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4b, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6b, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x47, 0x65, 0x61, 0x70, 0x65, 0x66, 0x75, 0x72, 0x69, 0x74, 0x2f, 0x6b, 0x6c, 0x69, 0x6e,
	0x65, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x6c, 0x69,
	0x6e, 0x65, 0x2f, 0x7a, 0x65, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kline_zeus_v1_kpoint_kpoint_proto_rawDescOnce sync.Once
	file_kline_zeus_v1_kpoint_kpoint_proto_rawDescData = file_kline_zeus_v1_kpoint_kpoint_proto_rawDesc
)

func file_kline_zeus_v1_kpoint_kpoint_proto_rawDescGZIP() []byte {
	file_kline_zeus_v1_kpoint_kpoint_proto_rawDescOnce.Do(func() {
		file_kline_zeus_v1_kpoint_kpoint_proto_rawDescData = protoimpl.X.CompressGZIP(file_kline_zeus_v1_kpoint_kpoint_proto_rawDescData)
	})
	return file_kline_zeus_v1_kpoint_kpoint_proto_rawDescData
}

var file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_kline_zeus_v1_kpoint_kpoint_proto_goTypes = []interface{}{
	(*KPointReq)(nil),                 // 0: kline.v1.kpoint.KPointReq
	(*KPoint)(nil),                    // 1: kline.v1.kpoint.KPoint
	(*Conds)(nil),                     // 2: kline.v1.kpoint.Conds
	(*CreateKPointRequest)(nil),       // 3: kline.v1.kpoint.CreateKPointRequest
	(*CreateKPointResponse)(nil),      // 4: kline.v1.kpoint.CreateKPointResponse
	(*GetKPointRequest)(nil),          // 5: kline.v1.kpoint.GetKPointRequest
	(*GetKPointResponse)(nil),         // 6: kline.v1.kpoint.GetKPointResponse
	(*GetKPointsRequest)(nil),         // 7: kline.v1.kpoint.GetKPointsRequest
	(*GetKPointsResponse)(nil),        // 8: kline.v1.kpoint.GetKPointsResponse
	(*KPointTypeInfo)(nil),            // 9: kline.v1.kpoint.KPointTypeInfo
	(*GetKPointTypesRequest)(nil),     // 10: kline.v1.kpoint.GetKPointTypesRequest
	(*GetKPointTypesResponse)(nil),    // 11: kline.v1.kpoint.GetKPointTypesResponse
	(*KPointForLine)(nil),             // 12: kline.v1.kpoint.KPointForLine
	(*GetKPointsForLineRequest)(nil),  // 13: kline.v1.kpoint.GetKPointsForLineRequest
	(*GetKPointsForLineResponse)(nil), // 14: kline.v1.kpoint.GetKPointsForLineResponse
	(*UpdateKPointRequest)(nil),       // 15: kline.v1.kpoint.UpdateKPointRequest
	(*UpdateKPointResponse)(nil),      // 16: kline.v1.kpoint.UpdateKPointResponse
	(*ExistKPointRequest)(nil),        // 17: kline.v1.kpoint.ExistKPointRequest
	(*ExistKPointResponse)(nil),       // 18: kline.v1.kpoint.ExistKPointResponse
	(*ExistKPointCondsRequest)(nil),   // 19: kline.v1.kpoint.ExistKPointCondsRequest
	(*ExistKPointCondsResponse)(nil),  // 20: kline.v1.kpoint.ExistKPointCondsResponse
	(*DeleteKPointRequest)(nil),       // 21: kline.v1.kpoint.DeleteKPointRequest
	(*DeleteKPointResponse)(nil),      // 22: kline.v1.kpoint.DeleteKPointResponse
	(v1.KPointType)(0),                // 23: basetype.KPointType
	(*kline.Uint32Val)(nil),           // 24: kline.Uint32Val
	(*kline.Int32SliceVal)(nil),       // 25: kline.Int32SliceVal
}
var file_kline_zeus_v1_kpoint_kpoint_proto_depIdxs = []int32{
	23, // 0: kline.v1.kpoint.KPointReq.KPointType:type_name -> basetype.KPointType
	23, // 1: kline.v1.kpoint.KPoint.KPointType:type_name -> basetype.KPointType
	24, // 2: kline.v1.kpoint.Conds.ID:type_name -> kline.Uint32Val
	24, // 3: kline.v1.kpoint.Conds.TokenPairID:type_name -> kline.Uint32Val
	24, // 4: kline.v1.kpoint.Conds.KPointType:type_name -> kline.Uint32Val
	24, // 5: kline.v1.kpoint.Conds.StartAt:type_name -> kline.Uint32Val
	24, // 6: kline.v1.kpoint.Conds.EndAt:type_name -> kline.Uint32Val
	25, // 7: kline.v1.kpoint.Conds.IDs:type_name -> kline.Int32SliceVal
	0,  // 8: kline.v1.kpoint.CreateKPointRequest.Info:type_name -> kline.v1.kpoint.KPointReq
	1,  // 9: kline.v1.kpoint.CreateKPointResponse.Info:type_name -> kline.v1.kpoint.KPoint
	1,  // 10: kline.v1.kpoint.GetKPointResponse.Info:type_name -> kline.v1.kpoint.KPoint
	2,  // 11: kline.v1.kpoint.GetKPointsRequest.Conds:type_name -> kline.v1.kpoint.Conds
	1,  // 12: kline.v1.kpoint.GetKPointsResponse.Infos:type_name -> kline.v1.kpoint.KPoint
	23, // 13: kline.v1.kpoint.KPointTypeInfo.KPointType:type_name -> basetype.KPointType
	9,  // 14: kline.v1.kpoint.GetKPointTypesResponse.Infos:type_name -> kline.v1.kpoint.KPointTypeInfo
	23, // 15: kline.v1.kpoint.GetKPointsForLineRequest.KPointType:type_name -> basetype.KPointType
	23, // 16: kline.v1.kpoint.GetKPointsForLineResponse.KPointType:type_name -> basetype.KPointType
	12, // 17: kline.v1.kpoint.GetKPointsForLineResponse.KPoints:type_name -> kline.v1.kpoint.KPointForLine
	0,  // 18: kline.v1.kpoint.UpdateKPointRequest.Info:type_name -> kline.v1.kpoint.KPointReq
	1,  // 19: kline.v1.kpoint.UpdateKPointResponse.Info:type_name -> kline.v1.kpoint.KPoint
	2,  // 20: kline.v1.kpoint.ExistKPointCondsRequest.Conds:type_name -> kline.v1.kpoint.Conds
	1,  // 21: kline.v1.kpoint.DeleteKPointResponse.Info:type_name -> kline.v1.kpoint.KPoint
	3,  // 22: kline.v1.kpoint.Manager.CreateKPoint:input_type -> kline.v1.kpoint.CreateKPointRequest
	15, // 23: kline.v1.kpoint.Manager.UpdateKPoint:input_type -> kline.v1.kpoint.UpdateKPointRequest
	5,  // 24: kline.v1.kpoint.Manager.GetKPoint:input_type -> kline.v1.kpoint.GetKPointRequest
	7,  // 25: kline.v1.kpoint.Manager.GetKPoints:input_type -> kline.v1.kpoint.GetKPointsRequest
	13, // 26: kline.v1.kpoint.Manager.GetKPointsForLine:input_type -> kline.v1.kpoint.GetKPointsForLineRequest
	10, // 27: kline.v1.kpoint.Manager.GetKPointTypes:input_type -> kline.v1.kpoint.GetKPointTypesRequest
	17, // 28: kline.v1.kpoint.Manager.ExistKPoint:input_type -> kline.v1.kpoint.ExistKPointRequest
	19, // 29: kline.v1.kpoint.Manager.ExistKPointConds:input_type -> kline.v1.kpoint.ExistKPointCondsRequest
	21, // 30: kline.v1.kpoint.Manager.DeleteKPoint:input_type -> kline.v1.kpoint.DeleteKPointRequest
	4,  // 31: kline.v1.kpoint.Manager.CreateKPoint:output_type -> kline.v1.kpoint.CreateKPointResponse
	16, // 32: kline.v1.kpoint.Manager.UpdateKPoint:output_type -> kline.v1.kpoint.UpdateKPointResponse
	6,  // 33: kline.v1.kpoint.Manager.GetKPoint:output_type -> kline.v1.kpoint.GetKPointResponse
	8,  // 34: kline.v1.kpoint.Manager.GetKPoints:output_type -> kline.v1.kpoint.GetKPointsResponse
	14, // 35: kline.v1.kpoint.Manager.GetKPointsForLine:output_type -> kline.v1.kpoint.GetKPointsForLineResponse
	11, // 36: kline.v1.kpoint.Manager.GetKPointTypes:output_type -> kline.v1.kpoint.GetKPointTypesResponse
	18, // 37: kline.v1.kpoint.Manager.ExistKPoint:output_type -> kline.v1.kpoint.ExistKPointResponse
	20, // 38: kline.v1.kpoint.Manager.ExistKPointConds:output_type -> kline.v1.kpoint.ExistKPointCondsResponse
	22, // 39: kline.v1.kpoint.Manager.DeleteKPoint:output_type -> kline.v1.kpoint.DeleteKPointResponse
	31, // [31:40] is the sub-list for method output_type
	22, // [22:31] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_kline_zeus_v1_kpoint_kpoint_proto_init() }
func file_kline_zeus_v1_kpoint_kpoint_proto_init() {
	if File_kline_zeus_v1_kpoint_kpoint_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPointReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKPointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPointTypeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKPointTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKPointTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPointForLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKPointsForLineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKPointsForLineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateKPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateKPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistKPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistKPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistKPointCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistKPointCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kline_zeus_v1_kpoint_kpoint_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kline_zeus_v1_kpoint_kpoint_proto_goTypes,
		DependencyIndexes: file_kline_zeus_v1_kpoint_kpoint_proto_depIdxs,
		MessageInfos:      file_kline_zeus_v1_kpoint_kpoint_proto_msgTypes,
	}.Build()
	File_kline_zeus_v1_kpoint_kpoint_proto = out.File
	file_kline_zeus_v1_kpoint_kpoint_proto_rawDesc = nil
	file_kline_zeus_v1_kpoint_kpoint_proto_goTypes = nil
	file_kline_zeus_v1_kpoint_kpoint_proto_depIdxs = nil
}
