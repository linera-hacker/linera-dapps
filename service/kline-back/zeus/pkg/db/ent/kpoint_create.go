// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/kpoint"
)

// KPointCreate is the builder for creating a KPoint entity.
type KPointCreate struct {
	config
	mutation *KPointMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (kc *KPointCreate) SetCreatedAt(u uint32) *KPointCreate {
	kc.mutation.SetCreatedAt(u)
	return kc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kc *KPointCreate) SetNillableCreatedAt(u *uint32) *KPointCreate {
	if u != nil {
		kc.SetCreatedAt(*u)
	}
	return kc
}

// SetUpdatedAt sets the "updated_at" field.
func (kc *KPointCreate) SetUpdatedAt(u uint32) *KPointCreate {
	kc.mutation.SetUpdatedAt(u)
	return kc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (kc *KPointCreate) SetNillableUpdatedAt(u *uint32) *KPointCreate {
	if u != nil {
		kc.SetUpdatedAt(*u)
	}
	return kc
}

// SetDeletedAt sets the "deleted_at" field.
func (kc *KPointCreate) SetDeletedAt(u uint32) *KPointCreate {
	kc.mutation.SetDeletedAt(u)
	return kc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kc *KPointCreate) SetNillableDeletedAt(u *uint32) *KPointCreate {
	if u != nil {
		kc.SetDeletedAt(*u)
	}
	return kc
}

// SetTokenPairID sets the "token_pair_id" field.
func (kc *KPointCreate) SetTokenPairID(u uint32) *KPointCreate {
	kc.mutation.SetTokenPairID(u)
	return kc
}

// SetKPointType sets the "k_point_type" field.
func (kc *KPointCreate) SetKPointType(s string) *KPointCreate {
	kc.mutation.SetKPointType(s)
	return kc
}

// SetNillableKPointType sets the "k_point_type" field if the given value is not nil.
func (kc *KPointCreate) SetNillableKPointType(s *string) *KPointCreate {
	if s != nil {
		kc.SetKPointType(*s)
	}
	return kc
}

// SetOpen sets the "open" field.
func (kc *KPointCreate) SetOpen(f float64) *KPointCreate {
	kc.mutation.SetOpen(f)
	return kc
}

// SetHigh sets the "high" field.
func (kc *KPointCreate) SetHigh(f float64) *KPointCreate {
	kc.mutation.SetHigh(f)
	return kc
}

// SetLow sets the "low" field.
func (kc *KPointCreate) SetLow(f float64) *KPointCreate {
	kc.mutation.SetLow(f)
	return kc
}

// SetClose sets the "close" field.
func (kc *KPointCreate) SetClose(f float64) *KPointCreate {
	kc.mutation.SetClose(f)
	return kc
}

// SetStartTime sets the "start_time" field.
func (kc *KPointCreate) SetStartTime(u uint32) *KPointCreate {
	kc.mutation.SetStartTime(u)
	return kc
}

// SetEndTime sets the "end_time" field.
func (kc *KPointCreate) SetEndTime(u uint32) *KPointCreate {
	kc.mutation.SetEndTime(u)
	return kc
}

// SetID sets the "id" field.
func (kc *KPointCreate) SetID(u uint32) *KPointCreate {
	kc.mutation.SetID(u)
	return kc
}

// Mutation returns the KPointMutation object of the builder.
func (kc *KPointCreate) Mutation() *KPointMutation {
	return kc.mutation
}

// Save creates the KPoint in the database.
func (kc *KPointCreate) Save(ctx context.Context) (*KPoint, error) {
	var (
		err  error
		node *KPoint
	)
	if err := kc.defaults(); err != nil {
		return nil, err
	}
	if len(kc.hooks) == 0 {
		if err = kc.check(); err != nil {
			return nil, err
		}
		node, err = kc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KPointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kc.check(); err != nil {
				return nil, err
			}
			kc.mutation = mutation
			if node, err = kc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(kc.hooks) - 1; i >= 0; i-- {
			if kc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, kc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*KPoint)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from KPointMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (kc *KPointCreate) SaveX(ctx context.Context) *KPoint {
	v, err := kc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kc *KPointCreate) Exec(ctx context.Context) error {
	_, err := kc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kc *KPointCreate) ExecX(ctx context.Context) {
	if err := kc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kc *KPointCreate) defaults() error {
	if _, ok := kc.mutation.CreatedAt(); !ok {
		if kpoint.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized kpoint.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := kpoint.DefaultCreatedAt()
		kc.mutation.SetCreatedAt(v)
	}
	if _, ok := kc.mutation.UpdatedAt(); !ok {
		if kpoint.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized kpoint.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := kpoint.DefaultUpdatedAt()
		kc.mutation.SetUpdatedAt(v)
	}
	if _, ok := kc.mutation.DeletedAt(); !ok {
		if kpoint.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized kpoint.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := kpoint.DefaultDeletedAt()
		kc.mutation.SetDeletedAt(v)
	}
	if _, ok := kc.mutation.KPointType(); !ok {
		v := kpoint.DefaultKPointType
		kc.mutation.SetKPointType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (kc *KPointCreate) check() error {
	if _, ok := kc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "KPoint.created_at"`)}
	}
	if _, ok := kc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "KPoint.updated_at"`)}
	}
	if _, ok := kc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "KPoint.deleted_at"`)}
	}
	if _, ok := kc.mutation.TokenPairID(); !ok {
		return &ValidationError{Name: "token_pair_id", err: errors.New(`ent: missing required field "KPoint.token_pair_id"`)}
	}
	if _, ok := kc.mutation.Open(); !ok {
		return &ValidationError{Name: "open", err: errors.New(`ent: missing required field "KPoint.open"`)}
	}
	if _, ok := kc.mutation.High(); !ok {
		return &ValidationError{Name: "high", err: errors.New(`ent: missing required field "KPoint.high"`)}
	}
	if _, ok := kc.mutation.Low(); !ok {
		return &ValidationError{Name: "low", err: errors.New(`ent: missing required field "KPoint.low"`)}
	}
	if _, ok := kc.mutation.Close(); !ok {
		return &ValidationError{Name: "close", err: errors.New(`ent: missing required field "KPoint.close"`)}
	}
	if _, ok := kc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "KPoint.start_time"`)}
	}
	if _, ok := kc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "KPoint.end_time"`)}
	}
	return nil
}

func (kc *KPointCreate) sqlSave(ctx context.Context) (*KPoint, error) {
	_node, _spec := kc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (kc *KPointCreate) createSpec() (*KPoint, *sqlgraph.CreateSpec) {
	var (
		_node = &KPoint{config: kc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: kpoint.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: kpoint.FieldID,
			},
		}
	)
	_spec.OnConflict = kc.conflict
	if id, ok := kc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := kc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := kc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := kc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := kc.mutation.TokenPairID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldTokenPairID,
		})
		_node.TokenPairID = value
	}
	if value, ok := kc.mutation.KPointType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kpoint.FieldKPointType,
		})
		_node.KPointType = value
	}
	if value, ok := kc.mutation.Open(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldOpen,
		})
		_node.Open = value
	}
	if value, ok := kc.mutation.High(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldHigh,
		})
		_node.High = value
	}
	if value, ok := kc.mutation.Low(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldLow,
		})
		_node.Low = value
	}
	if value, ok := kc.mutation.Close(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldClose,
		})
		_node.Close = value
	}
	if value, ok := kc.mutation.StartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldStartTime,
		})
		_node.StartTime = value
	}
	if value, ok := kc.mutation.EndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldEndTime,
		})
		_node.EndTime = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KPoint.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KPointUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (kc *KPointCreate) OnConflict(opts ...sql.ConflictOption) *KPointUpsertOne {
	kc.conflict = opts
	return &KPointUpsertOne{
		create: kc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KPoint.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kc *KPointCreate) OnConflictColumns(columns ...string) *KPointUpsertOne {
	kc.conflict = append(kc.conflict, sql.ConflictColumns(columns...))
	return &KPointUpsertOne{
		create: kc,
	}
}

type (
	// KPointUpsertOne is the builder for "upsert"-ing
	//  one KPoint node.
	KPointUpsertOne struct {
		create *KPointCreate
	}

	// KPointUpsert is the "OnConflict" setter.
	KPointUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *KPointUpsert) SetCreatedAt(v uint32) *KPointUpsert {
	u.Set(kpoint.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *KPointUpsert) UpdateCreatedAt() *KPointUpsert {
	u.SetExcluded(kpoint.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *KPointUpsert) AddCreatedAt(v uint32) *KPointUpsert {
	u.Add(kpoint.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KPointUpsert) SetUpdatedAt(v uint32) *KPointUpsert {
	u.Set(kpoint.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KPointUpsert) UpdateUpdatedAt() *KPointUpsert {
	u.SetExcluded(kpoint.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *KPointUpsert) AddUpdatedAt(v uint32) *KPointUpsert {
	u.Add(kpoint.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *KPointUpsert) SetDeletedAt(v uint32) *KPointUpsert {
	u.Set(kpoint.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *KPointUpsert) UpdateDeletedAt() *KPointUpsert {
	u.SetExcluded(kpoint.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *KPointUpsert) AddDeletedAt(v uint32) *KPointUpsert {
	u.Add(kpoint.FieldDeletedAt, v)
	return u
}

// SetTokenPairID sets the "token_pair_id" field.
func (u *KPointUpsert) SetTokenPairID(v uint32) *KPointUpsert {
	u.Set(kpoint.FieldTokenPairID, v)
	return u
}

// UpdateTokenPairID sets the "token_pair_id" field to the value that was provided on create.
func (u *KPointUpsert) UpdateTokenPairID() *KPointUpsert {
	u.SetExcluded(kpoint.FieldTokenPairID)
	return u
}

// AddTokenPairID adds v to the "token_pair_id" field.
func (u *KPointUpsert) AddTokenPairID(v uint32) *KPointUpsert {
	u.Add(kpoint.FieldTokenPairID, v)
	return u
}

// SetKPointType sets the "k_point_type" field.
func (u *KPointUpsert) SetKPointType(v string) *KPointUpsert {
	u.Set(kpoint.FieldKPointType, v)
	return u
}

// UpdateKPointType sets the "k_point_type" field to the value that was provided on create.
func (u *KPointUpsert) UpdateKPointType() *KPointUpsert {
	u.SetExcluded(kpoint.FieldKPointType)
	return u
}

// ClearKPointType clears the value of the "k_point_type" field.
func (u *KPointUpsert) ClearKPointType() *KPointUpsert {
	u.SetNull(kpoint.FieldKPointType)
	return u
}

// SetOpen sets the "open" field.
func (u *KPointUpsert) SetOpen(v float64) *KPointUpsert {
	u.Set(kpoint.FieldOpen, v)
	return u
}

// UpdateOpen sets the "open" field to the value that was provided on create.
func (u *KPointUpsert) UpdateOpen() *KPointUpsert {
	u.SetExcluded(kpoint.FieldOpen)
	return u
}

// AddOpen adds v to the "open" field.
func (u *KPointUpsert) AddOpen(v float64) *KPointUpsert {
	u.Add(kpoint.FieldOpen, v)
	return u
}

// SetHigh sets the "high" field.
func (u *KPointUpsert) SetHigh(v float64) *KPointUpsert {
	u.Set(kpoint.FieldHigh, v)
	return u
}

// UpdateHigh sets the "high" field to the value that was provided on create.
func (u *KPointUpsert) UpdateHigh() *KPointUpsert {
	u.SetExcluded(kpoint.FieldHigh)
	return u
}

// AddHigh adds v to the "high" field.
func (u *KPointUpsert) AddHigh(v float64) *KPointUpsert {
	u.Add(kpoint.FieldHigh, v)
	return u
}

// SetLow sets the "low" field.
func (u *KPointUpsert) SetLow(v float64) *KPointUpsert {
	u.Set(kpoint.FieldLow, v)
	return u
}

// UpdateLow sets the "low" field to the value that was provided on create.
func (u *KPointUpsert) UpdateLow() *KPointUpsert {
	u.SetExcluded(kpoint.FieldLow)
	return u
}

// AddLow adds v to the "low" field.
func (u *KPointUpsert) AddLow(v float64) *KPointUpsert {
	u.Add(kpoint.FieldLow, v)
	return u
}

// SetClose sets the "close" field.
func (u *KPointUpsert) SetClose(v float64) *KPointUpsert {
	u.Set(kpoint.FieldClose, v)
	return u
}

// UpdateClose sets the "close" field to the value that was provided on create.
func (u *KPointUpsert) UpdateClose() *KPointUpsert {
	u.SetExcluded(kpoint.FieldClose)
	return u
}

// AddClose adds v to the "close" field.
func (u *KPointUpsert) AddClose(v float64) *KPointUpsert {
	u.Add(kpoint.FieldClose, v)
	return u
}

// SetStartTime sets the "start_time" field.
func (u *KPointUpsert) SetStartTime(v uint32) *KPointUpsert {
	u.Set(kpoint.FieldStartTime, v)
	return u
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *KPointUpsert) UpdateStartTime() *KPointUpsert {
	u.SetExcluded(kpoint.FieldStartTime)
	return u
}

// AddStartTime adds v to the "start_time" field.
func (u *KPointUpsert) AddStartTime(v uint32) *KPointUpsert {
	u.Add(kpoint.FieldStartTime, v)
	return u
}

// SetEndTime sets the "end_time" field.
func (u *KPointUpsert) SetEndTime(v uint32) *KPointUpsert {
	u.Set(kpoint.FieldEndTime, v)
	return u
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *KPointUpsert) UpdateEndTime() *KPointUpsert {
	u.SetExcluded(kpoint.FieldEndTime)
	return u
}

// AddEndTime adds v to the "end_time" field.
func (u *KPointUpsert) AddEndTime(v uint32) *KPointUpsert {
	u.Add(kpoint.FieldEndTime, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.KPoint.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(kpoint.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KPointUpsertOne) UpdateNewValues() *KPointUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(kpoint.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KPoint.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *KPointUpsertOne) Ignore() *KPointUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KPointUpsertOne) DoNothing() *KPointUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KPointCreate.OnConflict
// documentation for more info.
func (u *KPointUpsertOne) Update(set func(*KPointUpsert)) *KPointUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KPointUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *KPointUpsertOne) SetCreatedAt(v uint32) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *KPointUpsertOne) AddCreatedAt(v uint32) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *KPointUpsertOne) UpdateCreatedAt() *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KPointUpsertOne) SetUpdatedAt(v uint32) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *KPointUpsertOne) AddUpdatedAt(v uint32) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KPointUpsertOne) UpdateUpdatedAt() *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *KPointUpsertOne) SetDeletedAt(v uint32) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *KPointUpsertOne) AddDeletedAt(v uint32) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *KPointUpsertOne) UpdateDeletedAt() *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTokenPairID sets the "token_pair_id" field.
func (u *KPointUpsertOne) SetTokenPairID(v uint32) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.SetTokenPairID(v)
	})
}

// AddTokenPairID adds v to the "token_pair_id" field.
func (u *KPointUpsertOne) AddTokenPairID(v uint32) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.AddTokenPairID(v)
	})
}

// UpdateTokenPairID sets the "token_pair_id" field to the value that was provided on create.
func (u *KPointUpsertOne) UpdateTokenPairID() *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateTokenPairID()
	})
}

// SetKPointType sets the "k_point_type" field.
func (u *KPointUpsertOne) SetKPointType(v string) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.SetKPointType(v)
	})
}

// UpdateKPointType sets the "k_point_type" field to the value that was provided on create.
func (u *KPointUpsertOne) UpdateKPointType() *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateKPointType()
	})
}

// ClearKPointType clears the value of the "k_point_type" field.
func (u *KPointUpsertOne) ClearKPointType() *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.ClearKPointType()
	})
}

// SetOpen sets the "open" field.
func (u *KPointUpsertOne) SetOpen(v float64) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.SetOpen(v)
	})
}

// AddOpen adds v to the "open" field.
func (u *KPointUpsertOne) AddOpen(v float64) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.AddOpen(v)
	})
}

// UpdateOpen sets the "open" field to the value that was provided on create.
func (u *KPointUpsertOne) UpdateOpen() *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateOpen()
	})
}

// SetHigh sets the "high" field.
func (u *KPointUpsertOne) SetHigh(v float64) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.SetHigh(v)
	})
}

// AddHigh adds v to the "high" field.
func (u *KPointUpsertOne) AddHigh(v float64) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.AddHigh(v)
	})
}

// UpdateHigh sets the "high" field to the value that was provided on create.
func (u *KPointUpsertOne) UpdateHigh() *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateHigh()
	})
}

// SetLow sets the "low" field.
func (u *KPointUpsertOne) SetLow(v float64) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.SetLow(v)
	})
}

// AddLow adds v to the "low" field.
func (u *KPointUpsertOne) AddLow(v float64) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.AddLow(v)
	})
}

// UpdateLow sets the "low" field to the value that was provided on create.
func (u *KPointUpsertOne) UpdateLow() *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateLow()
	})
}

// SetClose sets the "close" field.
func (u *KPointUpsertOne) SetClose(v float64) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.SetClose(v)
	})
}

// AddClose adds v to the "close" field.
func (u *KPointUpsertOne) AddClose(v float64) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.AddClose(v)
	})
}

// UpdateClose sets the "close" field to the value that was provided on create.
func (u *KPointUpsertOne) UpdateClose() *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateClose()
	})
}

// SetStartTime sets the "start_time" field.
func (u *KPointUpsertOne) SetStartTime(v uint32) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.SetStartTime(v)
	})
}

// AddStartTime adds v to the "start_time" field.
func (u *KPointUpsertOne) AddStartTime(v uint32) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.AddStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *KPointUpsertOne) UpdateStartTime() *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *KPointUpsertOne) SetEndTime(v uint32) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.SetEndTime(v)
	})
}

// AddEndTime adds v to the "end_time" field.
func (u *KPointUpsertOne) AddEndTime(v uint32) *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.AddEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *KPointUpsertOne) UpdateEndTime() *KPointUpsertOne {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateEndTime()
	})
}

// Exec executes the query.
func (u *KPointUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KPointCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KPointUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *KPointUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *KPointUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// KPointCreateBulk is the builder for creating many KPoint entities in bulk.
type KPointCreateBulk struct {
	config
	builders []*KPointCreate
	conflict []sql.ConflictOption
}

// Save creates the KPoint entities in the database.
func (kcb *KPointCreateBulk) Save(ctx context.Context) ([]*KPoint, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kcb.builders))
	nodes := make([]*KPoint, len(kcb.builders))
	mutators := make([]Mutator, len(kcb.builders))
	for i := range kcb.builders {
		func(i int, root context.Context) {
			builder := kcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KPointMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = kcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kcb *KPointCreateBulk) SaveX(ctx context.Context) []*KPoint {
	v, err := kcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kcb *KPointCreateBulk) Exec(ctx context.Context) error {
	_, err := kcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcb *KPointCreateBulk) ExecX(ctx context.Context) {
	if err := kcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KPoint.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KPointUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (kcb *KPointCreateBulk) OnConflict(opts ...sql.ConflictOption) *KPointUpsertBulk {
	kcb.conflict = opts
	return &KPointUpsertBulk{
		create: kcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KPoint.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kcb *KPointCreateBulk) OnConflictColumns(columns ...string) *KPointUpsertBulk {
	kcb.conflict = append(kcb.conflict, sql.ConflictColumns(columns...))
	return &KPointUpsertBulk{
		create: kcb,
	}
}

// KPointUpsertBulk is the builder for "upsert"-ing
// a bulk of KPoint nodes.
type KPointUpsertBulk struct {
	create *KPointCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.KPoint.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(kpoint.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KPointUpsertBulk) UpdateNewValues() *KPointUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(kpoint.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KPoint.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *KPointUpsertBulk) Ignore() *KPointUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KPointUpsertBulk) DoNothing() *KPointUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KPointCreateBulk.OnConflict
// documentation for more info.
func (u *KPointUpsertBulk) Update(set func(*KPointUpsert)) *KPointUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KPointUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *KPointUpsertBulk) SetCreatedAt(v uint32) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *KPointUpsertBulk) AddCreatedAt(v uint32) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *KPointUpsertBulk) UpdateCreatedAt() *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KPointUpsertBulk) SetUpdatedAt(v uint32) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *KPointUpsertBulk) AddUpdatedAt(v uint32) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KPointUpsertBulk) UpdateUpdatedAt() *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *KPointUpsertBulk) SetDeletedAt(v uint32) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *KPointUpsertBulk) AddDeletedAt(v uint32) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *KPointUpsertBulk) UpdateDeletedAt() *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTokenPairID sets the "token_pair_id" field.
func (u *KPointUpsertBulk) SetTokenPairID(v uint32) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.SetTokenPairID(v)
	})
}

// AddTokenPairID adds v to the "token_pair_id" field.
func (u *KPointUpsertBulk) AddTokenPairID(v uint32) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.AddTokenPairID(v)
	})
}

// UpdateTokenPairID sets the "token_pair_id" field to the value that was provided on create.
func (u *KPointUpsertBulk) UpdateTokenPairID() *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateTokenPairID()
	})
}

// SetKPointType sets the "k_point_type" field.
func (u *KPointUpsertBulk) SetKPointType(v string) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.SetKPointType(v)
	})
}

// UpdateKPointType sets the "k_point_type" field to the value that was provided on create.
func (u *KPointUpsertBulk) UpdateKPointType() *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateKPointType()
	})
}

// ClearKPointType clears the value of the "k_point_type" field.
func (u *KPointUpsertBulk) ClearKPointType() *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.ClearKPointType()
	})
}

// SetOpen sets the "open" field.
func (u *KPointUpsertBulk) SetOpen(v float64) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.SetOpen(v)
	})
}

// AddOpen adds v to the "open" field.
func (u *KPointUpsertBulk) AddOpen(v float64) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.AddOpen(v)
	})
}

// UpdateOpen sets the "open" field to the value that was provided on create.
func (u *KPointUpsertBulk) UpdateOpen() *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateOpen()
	})
}

// SetHigh sets the "high" field.
func (u *KPointUpsertBulk) SetHigh(v float64) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.SetHigh(v)
	})
}

// AddHigh adds v to the "high" field.
func (u *KPointUpsertBulk) AddHigh(v float64) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.AddHigh(v)
	})
}

// UpdateHigh sets the "high" field to the value that was provided on create.
func (u *KPointUpsertBulk) UpdateHigh() *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateHigh()
	})
}

// SetLow sets the "low" field.
func (u *KPointUpsertBulk) SetLow(v float64) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.SetLow(v)
	})
}

// AddLow adds v to the "low" field.
func (u *KPointUpsertBulk) AddLow(v float64) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.AddLow(v)
	})
}

// UpdateLow sets the "low" field to the value that was provided on create.
func (u *KPointUpsertBulk) UpdateLow() *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateLow()
	})
}

// SetClose sets the "close" field.
func (u *KPointUpsertBulk) SetClose(v float64) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.SetClose(v)
	})
}

// AddClose adds v to the "close" field.
func (u *KPointUpsertBulk) AddClose(v float64) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.AddClose(v)
	})
}

// UpdateClose sets the "close" field to the value that was provided on create.
func (u *KPointUpsertBulk) UpdateClose() *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateClose()
	})
}

// SetStartTime sets the "start_time" field.
func (u *KPointUpsertBulk) SetStartTime(v uint32) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.SetStartTime(v)
	})
}

// AddStartTime adds v to the "start_time" field.
func (u *KPointUpsertBulk) AddStartTime(v uint32) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.AddStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *KPointUpsertBulk) UpdateStartTime() *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *KPointUpsertBulk) SetEndTime(v uint32) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.SetEndTime(v)
	})
}

// AddEndTime adds v to the "end_time" field.
func (u *KPointUpsertBulk) AddEndTime(v uint32) *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.AddEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *KPointUpsertBulk) UpdateEndTime() *KPointUpsertBulk {
	return u.Update(func(s *KPointUpsert) {
		s.UpdateEndTime()
	})
}

// Exec executes the query.
func (u *KPointUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the KPointCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KPointCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KPointUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
