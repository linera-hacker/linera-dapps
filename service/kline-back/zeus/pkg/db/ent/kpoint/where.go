// Code generated by ent, DO NOT EDIT.

package kpoint

import (
	"entgo.io/ent/dialect/sql"
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// TokenPairID applies equality check predicate on the "token_pair_id" field. It's identical to TokenPairIDEQ.
func TokenPairID(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenPairID), v))
	})
}

// KPointType applies equality check predicate on the "k_point_type" field. It's identical to KPointTypeEQ.
func KPointType(v string) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKPointType), v))
	})
}

// Open applies equality check predicate on the "open" field. It's identical to OpenEQ.
func Open(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpen), v))
	})
}

// High applies equality check predicate on the "high" field. It's identical to HighEQ.
func High(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHigh), v))
	})
}

// Low applies equality check predicate on the "low" field. It's identical to LowEQ.
func Low(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLow), v))
	})
}

// Close applies equality check predicate on the "close" field. It's identical to CloseEQ.
func Close(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClose), v))
	})
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// TokenPairIDEQ applies the EQ predicate on the "token_pair_id" field.
func TokenPairIDEQ(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenPairID), v))
	})
}

// TokenPairIDNEQ applies the NEQ predicate on the "token_pair_id" field.
func TokenPairIDNEQ(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTokenPairID), v))
	})
}

// TokenPairIDIn applies the In predicate on the "token_pair_id" field.
func TokenPairIDIn(vs ...uint32) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTokenPairID), v...))
	})
}

// TokenPairIDNotIn applies the NotIn predicate on the "token_pair_id" field.
func TokenPairIDNotIn(vs ...uint32) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTokenPairID), v...))
	})
}

// TokenPairIDGT applies the GT predicate on the "token_pair_id" field.
func TokenPairIDGT(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTokenPairID), v))
	})
}

// TokenPairIDGTE applies the GTE predicate on the "token_pair_id" field.
func TokenPairIDGTE(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTokenPairID), v))
	})
}

// TokenPairIDLT applies the LT predicate on the "token_pair_id" field.
func TokenPairIDLT(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTokenPairID), v))
	})
}

// TokenPairIDLTE applies the LTE predicate on the "token_pair_id" field.
func TokenPairIDLTE(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTokenPairID), v))
	})
}

// KPointTypeEQ applies the EQ predicate on the "k_point_type" field.
func KPointTypeEQ(v string) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKPointType), v))
	})
}

// KPointTypeNEQ applies the NEQ predicate on the "k_point_type" field.
func KPointTypeNEQ(v string) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKPointType), v))
	})
}

// KPointTypeIn applies the In predicate on the "k_point_type" field.
func KPointTypeIn(vs ...string) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldKPointType), v...))
	})
}

// KPointTypeNotIn applies the NotIn predicate on the "k_point_type" field.
func KPointTypeNotIn(vs ...string) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldKPointType), v...))
	})
}

// KPointTypeGT applies the GT predicate on the "k_point_type" field.
func KPointTypeGT(v string) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKPointType), v))
	})
}

// KPointTypeGTE applies the GTE predicate on the "k_point_type" field.
func KPointTypeGTE(v string) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKPointType), v))
	})
}

// KPointTypeLT applies the LT predicate on the "k_point_type" field.
func KPointTypeLT(v string) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKPointType), v))
	})
}

// KPointTypeLTE applies the LTE predicate on the "k_point_type" field.
func KPointTypeLTE(v string) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKPointType), v))
	})
}

// KPointTypeContains applies the Contains predicate on the "k_point_type" field.
func KPointTypeContains(v string) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKPointType), v))
	})
}

// KPointTypeHasPrefix applies the HasPrefix predicate on the "k_point_type" field.
func KPointTypeHasPrefix(v string) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKPointType), v))
	})
}

// KPointTypeHasSuffix applies the HasSuffix predicate on the "k_point_type" field.
func KPointTypeHasSuffix(v string) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKPointType), v))
	})
}

// KPointTypeIsNil applies the IsNil predicate on the "k_point_type" field.
func KPointTypeIsNil() predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldKPointType)))
	})
}

// KPointTypeNotNil applies the NotNil predicate on the "k_point_type" field.
func KPointTypeNotNil() predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldKPointType)))
	})
}

// KPointTypeEqualFold applies the EqualFold predicate on the "k_point_type" field.
func KPointTypeEqualFold(v string) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKPointType), v))
	})
}

// KPointTypeContainsFold applies the ContainsFold predicate on the "k_point_type" field.
func KPointTypeContainsFold(v string) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKPointType), v))
	})
}

// OpenEQ applies the EQ predicate on the "open" field.
func OpenEQ(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpen), v))
	})
}

// OpenNEQ applies the NEQ predicate on the "open" field.
func OpenNEQ(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpen), v))
	})
}

// OpenIn applies the In predicate on the "open" field.
func OpenIn(vs ...float64) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOpen), v...))
	})
}

// OpenNotIn applies the NotIn predicate on the "open" field.
func OpenNotIn(vs ...float64) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOpen), v...))
	})
}

// OpenGT applies the GT predicate on the "open" field.
func OpenGT(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpen), v))
	})
}

// OpenGTE applies the GTE predicate on the "open" field.
func OpenGTE(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpen), v))
	})
}

// OpenLT applies the LT predicate on the "open" field.
func OpenLT(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpen), v))
	})
}

// OpenLTE applies the LTE predicate on the "open" field.
func OpenLTE(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpen), v))
	})
}

// HighEQ applies the EQ predicate on the "high" field.
func HighEQ(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHigh), v))
	})
}

// HighNEQ applies the NEQ predicate on the "high" field.
func HighNEQ(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHigh), v))
	})
}

// HighIn applies the In predicate on the "high" field.
func HighIn(vs ...float64) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHigh), v...))
	})
}

// HighNotIn applies the NotIn predicate on the "high" field.
func HighNotIn(vs ...float64) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHigh), v...))
	})
}

// HighGT applies the GT predicate on the "high" field.
func HighGT(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHigh), v))
	})
}

// HighGTE applies the GTE predicate on the "high" field.
func HighGTE(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHigh), v))
	})
}

// HighLT applies the LT predicate on the "high" field.
func HighLT(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHigh), v))
	})
}

// HighLTE applies the LTE predicate on the "high" field.
func HighLTE(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHigh), v))
	})
}

// LowEQ applies the EQ predicate on the "low" field.
func LowEQ(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLow), v))
	})
}

// LowNEQ applies the NEQ predicate on the "low" field.
func LowNEQ(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLow), v))
	})
}

// LowIn applies the In predicate on the "low" field.
func LowIn(vs ...float64) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLow), v...))
	})
}

// LowNotIn applies the NotIn predicate on the "low" field.
func LowNotIn(vs ...float64) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLow), v...))
	})
}

// LowGT applies the GT predicate on the "low" field.
func LowGT(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLow), v))
	})
}

// LowGTE applies the GTE predicate on the "low" field.
func LowGTE(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLow), v))
	})
}

// LowLT applies the LT predicate on the "low" field.
func LowLT(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLow), v))
	})
}

// LowLTE applies the LTE predicate on the "low" field.
func LowLTE(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLow), v))
	})
}

// CloseEQ applies the EQ predicate on the "close" field.
func CloseEQ(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClose), v))
	})
}

// CloseNEQ applies the NEQ predicate on the "close" field.
func CloseNEQ(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClose), v))
	})
}

// CloseIn applies the In predicate on the "close" field.
func CloseIn(vs ...float64) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldClose), v...))
	})
}

// CloseNotIn applies the NotIn predicate on the "close" field.
func CloseNotIn(vs ...float64) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldClose), v...))
	})
}

// CloseGT applies the GT predicate on the "close" field.
func CloseGT(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClose), v))
	})
}

// CloseGTE applies the GTE predicate on the "close" field.
func CloseGTE(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClose), v))
	})
}

// CloseLT applies the LT predicate on the "close" field.
func CloseLT(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClose), v))
	})
}

// CloseLTE applies the LTE predicate on the "close" field.
func CloseLTE(v float64) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClose), v))
	})
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartTime), v))
	})
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...uint32) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartTime), v...))
	})
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...uint32) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartTime), v...))
	})
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartTime), v))
	})
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartTime), v))
	})
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartTime), v))
	})
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartTime), v))
	})
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTime), v))
	})
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...uint32) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndTime), v...))
	})
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...uint32) predicate.KPoint {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndTime), v...))
	})
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTime), v))
	})
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTime), v))
	})
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTime), v))
	})
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v uint32) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.KPoint) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.KPoint) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.KPoint) predicate.KPoint {
	return predicate.KPoint(func(s *sql.Selector) {
		p(s.Not())
	})
}
