// Code generated by ent, DO NOT EDIT.

package tokenpair

import (
	"entgo.io/ent/dialect/sql"
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// PoolID applies equality check predicate on the "pool_id" field. It's identical to PoolIDEQ.
func PoolID(v uint64) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoolID), v))
	})
}

// TokenZeroID applies equality check predicate on the "token_zero_id" field. It's identical to TokenZeroIDEQ.
func TokenZeroID(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenZeroID), v))
	})
}

// TokenOneID applies equality check predicate on the "token_one_id" field. It's identical to TokenOneIDEQ.
func TokenOneID(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenOneID), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.TokenPair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.TokenPair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.TokenPair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.TokenPair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.TokenPair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.TokenPair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// PoolIDEQ applies the EQ predicate on the "pool_id" field.
func PoolIDEQ(v uint64) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoolID), v))
	})
}

// PoolIDNEQ applies the NEQ predicate on the "pool_id" field.
func PoolIDNEQ(v uint64) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPoolID), v))
	})
}

// PoolIDIn applies the In predicate on the "pool_id" field.
func PoolIDIn(vs ...uint64) predicate.TokenPair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPoolID), v...))
	})
}

// PoolIDNotIn applies the NotIn predicate on the "pool_id" field.
func PoolIDNotIn(vs ...uint64) predicate.TokenPair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPoolID), v...))
	})
}

// PoolIDGT applies the GT predicate on the "pool_id" field.
func PoolIDGT(v uint64) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPoolID), v))
	})
}

// PoolIDGTE applies the GTE predicate on the "pool_id" field.
func PoolIDGTE(v uint64) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPoolID), v))
	})
}

// PoolIDLT applies the LT predicate on the "pool_id" field.
func PoolIDLT(v uint64) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPoolID), v))
	})
}

// PoolIDLTE applies the LTE predicate on the "pool_id" field.
func PoolIDLTE(v uint64) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPoolID), v))
	})
}

// TokenZeroIDEQ applies the EQ predicate on the "token_zero_id" field.
func TokenZeroIDEQ(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenZeroID), v))
	})
}

// TokenZeroIDNEQ applies the NEQ predicate on the "token_zero_id" field.
func TokenZeroIDNEQ(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTokenZeroID), v))
	})
}

// TokenZeroIDIn applies the In predicate on the "token_zero_id" field.
func TokenZeroIDIn(vs ...uint32) predicate.TokenPair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTokenZeroID), v...))
	})
}

// TokenZeroIDNotIn applies the NotIn predicate on the "token_zero_id" field.
func TokenZeroIDNotIn(vs ...uint32) predicate.TokenPair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTokenZeroID), v...))
	})
}

// TokenZeroIDGT applies the GT predicate on the "token_zero_id" field.
func TokenZeroIDGT(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTokenZeroID), v))
	})
}

// TokenZeroIDGTE applies the GTE predicate on the "token_zero_id" field.
func TokenZeroIDGTE(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTokenZeroID), v))
	})
}

// TokenZeroIDLT applies the LT predicate on the "token_zero_id" field.
func TokenZeroIDLT(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTokenZeroID), v))
	})
}

// TokenZeroIDLTE applies the LTE predicate on the "token_zero_id" field.
func TokenZeroIDLTE(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTokenZeroID), v))
	})
}

// TokenOneIDEQ applies the EQ predicate on the "token_one_id" field.
func TokenOneIDEQ(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenOneID), v))
	})
}

// TokenOneIDNEQ applies the NEQ predicate on the "token_one_id" field.
func TokenOneIDNEQ(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTokenOneID), v))
	})
}

// TokenOneIDIn applies the In predicate on the "token_one_id" field.
func TokenOneIDIn(vs ...uint32) predicate.TokenPair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTokenOneID), v...))
	})
}

// TokenOneIDNotIn applies the NotIn predicate on the "token_one_id" field.
func TokenOneIDNotIn(vs ...uint32) predicate.TokenPair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTokenOneID), v...))
	})
}

// TokenOneIDGT applies the GT predicate on the "token_one_id" field.
func TokenOneIDGT(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTokenOneID), v))
	})
}

// TokenOneIDGTE applies the GTE predicate on the "token_one_id" field.
func TokenOneIDGTE(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTokenOneID), v))
	})
}

// TokenOneIDLT applies the LT predicate on the "token_one_id" field.
func TokenOneIDLT(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTokenOneID), v))
	})
}

// TokenOneIDLTE applies the LTE predicate on the "token_one_id" field.
func TokenOneIDLTE(v uint32) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTokenOneID), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.TokenPair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.TokenPair {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TokenPair) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TokenPair) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TokenPair) predicate.TokenPair {
	return predicate.TokenPair(func(s *sql.Selector) {
		p(s.Not())
	})
}
