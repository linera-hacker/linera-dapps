// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/kpoint"
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/predicate"
)

// KPointUpdate is the builder for updating KPoint entities.
type KPointUpdate struct {
	config
	hooks     []Hook
	mutation  *KPointMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the KPointUpdate builder.
func (ku *KPointUpdate) Where(ps ...predicate.KPoint) *KPointUpdate {
	ku.mutation.Where(ps...)
	return ku
}

// SetCreatedAt sets the "created_at" field.
func (ku *KPointUpdate) SetCreatedAt(u uint32) *KPointUpdate {
	ku.mutation.ResetCreatedAt()
	ku.mutation.SetCreatedAt(u)
	return ku
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ku *KPointUpdate) SetNillableCreatedAt(u *uint32) *KPointUpdate {
	if u != nil {
		ku.SetCreatedAt(*u)
	}
	return ku
}

// AddCreatedAt adds u to the "created_at" field.
func (ku *KPointUpdate) AddCreatedAt(u int32) *KPointUpdate {
	ku.mutation.AddCreatedAt(u)
	return ku
}

// SetUpdatedAt sets the "updated_at" field.
func (ku *KPointUpdate) SetUpdatedAt(u uint32) *KPointUpdate {
	ku.mutation.ResetUpdatedAt()
	ku.mutation.SetUpdatedAt(u)
	return ku
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ku *KPointUpdate) AddUpdatedAt(u int32) *KPointUpdate {
	ku.mutation.AddUpdatedAt(u)
	return ku
}

// SetDeletedAt sets the "deleted_at" field.
func (ku *KPointUpdate) SetDeletedAt(u uint32) *KPointUpdate {
	ku.mutation.ResetDeletedAt()
	ku.mutation.SetDeletedAt(u)
	return ku
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ku *KPointUpdate) SetNillableDeletedAt(u *uint32) *KPointUpdate {
	if u != nil {
		ku.SetDeletedAt(*u)
	}
	return ku
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ku *KPointUpdate) AddDeletedAt(u int32) *KPointUpdate {
	ku.mutation.AddDeletedAt(u)
	return ku
}

// SetTokenPairID sets the "token_pair_id" field.
func (ku *KPointUpdate) SetTokenPairID(u uint32) *KPointUpdate {
	ku.mutation.ResetTokenPairID()
	ku.mutation.SetTokenPairID(u)
	return ku
}

// AddTokenPairID adds u to the "token_pair_id" field.
func (ku *KPointUpdate) AddTokenPairID(u int32) *KPointUpdate {
	ku.mutation.AddTokenPairID(u)
	return ku
}

// SetKPointType sets the "k_point_type" field.
func (ku *KPointUpdate) SetKPointType(s string) *KPointUpdate {
	ku.mutation.SetKPointType(s)
	return ku
}

// SetNillableKPointType sets the "k_point_type" field if the given value is not nil.
func (ku *KPointUpdate) SetNillableKPointType(s *string) *KPointUpdate {
	if s != nil {
		ku.SetKPointType(*s)
	}
	return ku
}

// ClearKPointType clears the value of the "k_point_type" field.
func (ku *KPointUpdate) ClearKPointType() *KPointUpdate {
	ku.mutation.ClearKPointType()
	return ku
}

// SetOpen sets the "open" field.
func (ku *KPointUpdate) SetOpen(f float64) *KPointUpdate {
	ku.mutation.ResetOpen()
	ku.mutation.SetOpen(f)
	return ku
}

// AddOpen adds f to the "open" field.
func (ku *KPointUpdate) AddOpen(f float64) *KPointUpdate {
	ku.mutation.AddOpen(f)
	return ku
}

// SetHigh sets the "high" field.
func (ku *KPointUpdate) SetHigh(f float64) *KPointUpdate {
	ku.mutation.ResetHigh()
	ku.mutation.SetHigh(f)
	return ku
}

// AddHigh adds f to the "high" field.
func (ku *KPointUpdate) AddHigh(f float64) *KPointUpdate {
	ku.mutation.AddHigh(f)
	return ku
}

// SetLow sets the "low" field.
func (ku *KPointUpdate) SetLow(f float64) *KPointUpdate {
	ku.mutation.ResetLow()
	ku.mutation.SetLow(f)
	return ku
}

// AddLow adds f to the "low" field.
func (ku *KPointUpdate) AddLow(f float64) *KPointUpdate {
	ku.mutation.AddLow(f)
	return ku
}

// SetClose sets the "close" field.
func (ku *KPointUpdate) SetClose(f float64) *KPointUpdate {
	ku.mutation.ResetClose()
	ku.mutation.SetClose(f)
	return ku
}

// AddClose adds f to the "close" field.
func (ku *KPointUpdate) AddClose(f float64) *KPointUpdate {
	ku.mutation.AddClose(f)
	return ku
}

// SetStartTime sets the "start_time" field.
func (ku *KPointUpdate) SetStartTime(u uint32) *KPointUpdate {
	ku.mutation.ResetStartTime()
	ku.mutation.SetStartTime(u)
	return ku
}

// AddStartTime adds u to the "start_time" field.
func (ku *KPointUpdate) AddStartTime(u int32) *KPointUpdate {
	ku.mutation.AddStartTime(u)
	return ku
}

// SetEndTime sets the "end_time" field.
func (ku *KPointUpdate) SetEndTime(u uint32) *KPointUpdate {
	ku.mutation.ResetEndTime()
	ku.mutation.SetEndTime(u)
	return ku
}

// AddEndTime adds u to the "end_time" field.
func (ku *KPointUpdate) AddEndTime(u int32) *KPointUpdate {
	ku.mutation.AddEndTime(u)
	return ku
}

// Mutation returns the KPointMutation object of the builder.
func (ku *KPointUpdate) Mutation() *KPointMutation {
	return ku.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ku *KPointUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ku.defaults(); err != nil {
		return 0, err
	}
	if len(ku.hooks) == 0 {
		affected, err = ku.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KPointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ku.mutation = mutation
			affected, err = ku.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ku.hooks) - 1; i >= 0; i-- {
			if ku.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ku.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ku.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ku *KPointUpdate) SaveX(ctx context.Context) int {
	affected, err := ku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ku *KPointUpdate) Exec(ctx context.Context) error {
	_, err := ku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ku *KPointUpdate) ExecX(ctx context.Context) {
	if err := ku.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ku *KPointUpdate) defaults() error {
	if _, ok := ku.mutation.UpdatedAt(); !ok {
		if kpoint.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized kpoint.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := kpoint.UpdateDefaultUpdatedAt()
		ku.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ku *KPointUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *KPointUpdate {
	ku.modifiers = append(ku.modifiers, modifiers...)
	return ku
}

func (ku *KPointUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kpoint.Table,
			Columns: kpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: kpoint.FieldID,
			},
		},
	}
	if ps := ku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ku.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldCreatedAt,
		})
	}
	if value, ok := ku.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldCreatedAt,
		})
	}
	if value, ok := ku.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldUpdatedAt,
		})
	}
	if value, ok := ku.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldUpdatedAt,
		})
	}
	if value, ok := ku.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldDeletedAt,
		})
	}
	if value, ok := ku.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldDeletedAt,
		})
	}
	if value, ok := ku.mutation.TokenPairID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldTokenPairID,
		})
	}
	if value, ok := ku.mutation.AddedTokenPairID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldTokenPairID,
		})
	}
	if value, ok := ku.mutation.KPointType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kpoint.FieldKPointType,
		})
	}
	if ku.mutation.KPointTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: kpoint.FieldKPointType,
		})
	}
	if value, ok := ku.mutation.Open(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldOpen,
		})
	}
	if value, ok := ku.mutation.AddedOpen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldOpen,
		})
	}
	if value, ok := ku.mutation.High(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldHigh,
		})
	}
	if value, ok := ku.mutation.AddedHigh(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldHigh,
		})
	}
	if value, ok := ku.mutation.Low(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldLow,
		})
	}
	if value, ok := ku.mutation.AddedLow(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldLow,
		})
	}
	if value, ok := ku.mutation.Close(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldClose,
		})
	}
	if value, ok := ku.mutation.AddedClose(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldClose,
		})
	}
	if value, ok := ku.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldStartTime,
		})
	}
	if value, ok := ku.mutation.AddedStartTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldStartTime,
		})
	}
	if value, ok := ku.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldEndTime,
		})
	}
	if value, ok := ku.mutation.AddedEndTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldEndTime,
		})
	}
	_spec.Modifiers = ku.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, ku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// KPointUpdateOne is the builder for updating a single KPoint entity.
type KPointUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *KPointMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (kuo *KPointUpdateOne) SetCreatedAt(u uint32) *KPointUpdateOne {
	kuo.mutation.ResetCreatedAt()
	kuo.mutation.SetCreatedAt(u)
	return kuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kuo *KPointUpdateOne) SetNillableCreatedAt(u *uint32) *KPointUpdateOne {
	if u != nil {
		kuo.SetCreatedAt(*u)
	}
	return kuo
}

// AddCreatedAt adds u to the "created_at" field.
func (kuo *KPointUpdateOne) AddCreatedAt(u int32) *KPointUpdateOne {
	kuo.mutation.AddCreatedAt(u)
	return kuo
}

// SetUpdatedAt sets the "updated_at" field.
func (kuo *KPointUpdateOne) SetUpdatedAt(u uint32) *KPointUpdateOne {
	kuo.mutation.ResetUpdatedAt()
	kuo.mutation.SetUpdatedAt(u)
	return kuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (kuo *KPointUpdateOne) AddUpdatedAt(u int32) *KPointUpdateOne {
	kuo.mutation.AddUpdatedAt(u)
	return kuo
}

// SetDeletedAt sets the "deleted_at" field.
func (kuo *KPointUpdateOne) SetDeletedAt(u uint32) *KPointUpdateOne {
	kuo.mutation.ResetDeletedAt()
	kuo.mutation.SetDeletedAt(u)
	return kuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kuo *KPointUpdateOne) SetNillableDeletedAt(u *uint32) *KPointUpdateOne {
	if u != nil {
		kuo.SetDeletedAt(*u)
	}
	return kuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (kuo *KPointUpdateOne) AddDeletedAt(u int32) *KPointUpdateOne {
	kuo.mutation.AddDeletedAt(u)
	return kuo
}

// SetTokenPairID sets the "token_pair_id" field.
func (kuo *KPointUpdateOne) SetTokenPairID(u uint32) *KPointUpdateOne {
	kuo.mutation.ResetTokenPairID()
	kuo.mutation.SetTokenPairID(u)
	return kuo
}

// AddTokenPairID adds u to the "token_pair_id" field.
func (kuo *KPointUpdateOne) AddTokenPairID(u int32) *KPointUpdateOne {
	kuo.mutation.AddTokenPairID(u)
	return kuo
}

// SetKPointType sets the "k_point_type" field.
func (kuo *KPointUpdateOne) SetKPointType(s string) *KPointUpdateOne {
	kuo.mutation.SetKPointType(s)
	return kuo
}

// SetNillableKPointType sets the "k_point_type" field if the given value is not nil.
func (kuo *KPointUpdateOne) SetNillableKPointType(s *string) *KPointUpdateOne {
	if s != nil {
		kuo.SetKPointType(*s)
	}
	return kuo
}

// ClearKPointType clears the value of the "k_point_type" field.
func (kuo *KPointUpdateOne) ClearKPointType() *KPointUpdateOne {
	kuo.mutation.ClearKPointType()
	return kuo
}

// SetOpen sets the "open" field.
func (kuo *KPointUpdateOne) SetOpen(f float64) *KPointUpdateOne {
	kuo.mutation.ResetOpen()
	kuo.mutation.SetOpen(f)
	return kuo
}

// AddOpen adds f to the "open" field.
func (kuo *KPointUpdateOne) AddOpen(f float64) *KPointUpdateOne {
	kuo.mutation.AddOpen(f)
	return kuo
}

// SetHigh sets the "high" field.
func (kuo *KPointUpdateOne) SetHigh(f float64) *KPointUpdateOne {
	kuo.mutation.ResetHigh()
	kuo.mutation.SetHigh(f)
	return kuo
}

// AddHigh adds f to the "high" field.
func (kuo *KPointUpdateOne) AddHigh(f float64) *KPointUpdateOne {
	kuo.mutation.AddHigh(f)
	return kuo
}

// SetLow sets the "low" field.
func (kuo *KPointUpdateOne) SetLow(f float64) *KPointUpdateOne {
	kuo.mutation.ResetLow()
	kuo.mutation.SetLow(f)
	return kuo
}

// AddLow adds f to the "low" field.
func (kuo *KPointUpdateOne) AddLow(f float64) *KPointUpdateOne {
	kuo.mutation.AddLow(f)
	return kuo
}

// SetClose sets the "close" field.
func (kuo *KPointUpdateOne) SetClose(f float64) *KPointUpdateOne {
	kuo.mutation.ResetClose()
	kuo.mutation.SetClose(f)
	return kuo
}

// AddClose adds f to the "close" field.
func (kuo *KPointUpdateOne) AddClose(f float64) *KPointUpdateOne {
	kuo.mutation.AddClose(f)
	return kuo
}

// SetStartTime sets the "start_time" field.
func (kuo *KPointUpdateOne) SetStartTime(u uint32) *KPointUpdateOne {
	kuo.mutation.ResetStartTime()
	kuo.mutation.SetStartTime(u)
	return kuo
}

// AddStartTime adds u to the "start_time" field.
func (kuo *KPointUpdateOne) AddStartTime(u int32) *KPointUpdateOne {
	kuo.mutation.AddStartTime(u)
	return kuo
}

// SetEndTime sets the "end_time" field.
func (kuo *KPointUpdateOne) SetEndTime(u uint32) *KPointUpdateOne {
	kuo.mutation.ResetEndTime()
	kuo.mutation.SetEndTime(u)
	return kuo
}

// AddEndTime adds u to the "end_time" field.
func (kuo *KPointUpdateOne) AddEndTime(u int32) *KPointUpdateOne {
	kuo.mutation.AddEndTime(u)
	return kuo
}

// Mutation returns the KPointMutation object of the builder.
func (kuo *KPointUpdateOne) Mutation() *KPointMutation {
	return kuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kuo *KPointUpdateOne) Select(field string, fields ...string) *KPointUpdateOne {
	kuo.fields = append([]string{field}, fields...)
	return kuo
}

// Save executes the query and returns the updated KPoint entity.
func (kuo *KPointUpdateOne) Save(ctx context.Context) (*KPoint, error) {
	var (
		err  error
		node *KPoint
	)
	if err := kuo.defaults(); err != nil {
		return nil, err
	}
	if len(kuo.hooks) == 0 {
		node, err = kuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KPointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kuo.mutation = mutation
			node, err = kuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kuo.hooks) - 1; i >= 0; i-- {
			if kuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, kuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*KPoint)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from KPointMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kuo *KPointUpdateOne) SaveX(ctx context.Context) *KPoint {
	node, err := kuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kuo *KPointUpdateOne) Exec(ctx context.Context) error {
	_, err := kuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kuo *KPointUpdateOne) ExecX(ctx context.Context) {
	if err := kuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kuo *KPointUpdateOne) defaults() error {
	if _, ok := kuo.mutation.UpdatedAt(); !ok {
		if kpoint.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized kpoint.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := kpoint.UpdateDefaultUpdatedAt()
		kuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (kuo *KPointUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *KPointUpdateOne {
	kuo.modifiers = append(kuo.modifiers, modifiers...)
	return kuo
}

func (kuo *KPointUpdateOne) sqlSave(ctx context.Context) (_node *KPoint, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kpoint.Table,
			Columns: kpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: kpoint.FieldID,
			},
		},
	}
	id, ok := kuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KPoint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kpoint.FieldID)
		for _, f := range fields {
			if !kpoint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kpoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldCreatedAt,
		})
	}
	if value, ok := kuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldCreatedAt,
		})
	}
	if value, ok := kuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldUpdatedAt,
		})
	}
	if value, ok := kuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldUpdatedAt,
		})
	}
	if value, ok := kuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldDeletedAt,
		})
	}
	if value, ok := kuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldDeletedAt,
		})
	}
	if value, ok := kuo.mutation.TokenPairID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldTokenPairID,
		})
	}
	if value, ok := kuo.mutation.AddedTokenPairID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldTokenPairID,
		})
	}
	if value, ok := kuo.mutation.KPointType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kpoint.FieldKPointType,
		})
	}
	if kuo.mutation.KPointTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: kpoint.FieldKPointType,
		})
	}
	if value, ok := kuo.mutation.Open(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldOpen,
		})
	}
	if value, ok := kuo.mutation.AddedOpen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldOpen,
		})
	}
	if value, ok := kuo.mutation.High(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldHigh,
		})
	}
	if value, ok := kuo.mutation.AddedHigh(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldHigh,
		})
	}
	if value, ok := kuo.mutation.Low(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldLow,
		})
	}
	if value, ok := kuo.mutation.AddedLow(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldLow,
		})
	}
	if value, ok := kuo.mutation.Close(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldClose,
		})
	}
	if value, ok := kuo.mutation.AddedClose(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kpoint.FieldClose,
		})
	}
	if value, ok := kuo.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldStartTime,
		})
	}
	if value, ok := kuo.mutation.AddedStartTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldStartTime,
		})
	}
	if value, ok := kuo.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldEndTime,
		})
	}
	if value, ok := kuo.mutation.AddedEndTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kpoint.FieldEndTime,
		})
	}
	_spec.Modifiers = kuo.modifiers
	_node = &KPoint{config: kuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
