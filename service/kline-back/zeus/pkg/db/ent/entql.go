// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/kpoint"
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/kprice"
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/token"
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/tokenpair"
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/transaction"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 5)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   kpoint.Table,
			Columns: kpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: kpoint.FieldID,
			},
		},
		Type: "KPoint",
		Fields: map[string]*sqlgraph.FieldSpec{
			kpoint.FieldCreatedAt:   {Type: field.TypeUint32, Column: kpoint.FieldCreatedAt},
			kpoint.FieldUpdatedAt:   {Type: field.TypeUint32, Column: kpoint.FieldUpdatedAt},
			kpoint.FieldDeletedAt:   {Type: field.TypeUint32, Column: kpoint.FieldDeletedAt},
			kpoint.FieldTokenPairID: {Type: field.TypeUint32, Column: kpoint.FieldTokenPairID},
			kpoint.FieldKPointType:  {Type: field.TypeString, Column: kpoint.FieldKPointType},
			kpoint.FieldOpen:        {Type: field.TypeFloat64, Column: kpoint.FieldOpen},
			kpoint.FieldHigh:        {Type: field.TypeFloat64, Column: kpoint.FieldHigh},
			kpoint.FieldLow:         {Type: field.TypeFloat64, Column: kpoint.FieldLow},
			kpoint.FieldClose:       {Type: field.TypeFloat64, Column: kpoint.FieldClose},
			kpoint.FieldStartTime:   {Type: field.TypeUint32, Column: kpoint.FieldStartTime},
			kpoint.FieldEndTime:     {Type: field.TypeUint32, Column: kpoint.FieldEndTime},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   kprice.Table,
			Columns: kprice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: kprice.FieldID,
			},
		},
		Type: "KPrice",
		Fields: map[string]*sqlgraph.FieldSpec{
			kprice.FieldCreatedAt:   {Type: field.TypeUint32, Column: kprice.FieldCreatedAt},
			kprice.FieldUpdatedAt:   {Type: field.TypeUint32, Column: kprice.FieldUpdatedAt},
			kprice.FieldDeletedAt:   {Type: field.TypeUint32, Column: kprice.FieldDeletedAt},
			kprice.FieldTokenPairID: {Type: field.TypeUint32, Column: kprice.FieldTokenPairID},
			kprice.FieldPrice:       {Type: field.TypeFloat64, Column: kprice.FieldPrice},
			kprice.FieldTimestamp:   {Type: field.TypeUint32, Column: kprice.FieldTimestamp},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   token.Table,
			Columns: token.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: token.FieldID,
			},
		},
		Type: "Token",
		Fields: map[string]*sqlgraph.FieldSpec{
			token.FieldCreatedAt: {Type: field.TypeUint32, Column: token.FieldCreatedAt},
			token.FieldUpdatedAt: {Type: field.TypeUint32, Column: token.FieldUpdatedAt},
			token.FieldDeletedAt: {Type: field.TypeUint32, Column: token.FieldDeletedAt},
			token.FieldAddress:   {Type: field.TypeString, Column: token.FieldAddress},
			token.FieldSite:      {Type: field.TypeString, Column: token.FieldSite},
			token.FieldIcon:      {Type: field.TypeString, Column: token.FieldIcon},
			token.FieldName:      {Type: field.TypeString, Column: token.FieldName},
			token.FieldSymbol:    {Type: field.TypeString, Column: token.FieldSymbol},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tokenpair.Table,
			Columns: tokenpair.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: tokenpair.FieldID,
			},
		},
		Type: "TokenPair",
		Fields: map[string]*sqlgraph.FieldSpec{
			tokenpair.FieldCreatedAt:   {Type: field.TypeUint32, Column: tokenpair.FieldCreatedAt},
			tokenpair.FieldUpdatedAt:   {Type: field.TypeUint32, Column: tokenpair.FieldUpdatedAt},
			tokenpair.FieldDeletedAt:   {Type: field.TypeUint32, Column: tokenpair.FieldDeletedAt},
			tokenpair.FieldPoolID:      {Type: field.TypeUint64, Column: tokenpair.FieldPoolID},
			tokenpair.FieldTokenZeroID: {Type: field.TypeUint32, Column: tokenpair.FieldTokenZeroID},
			tokenpair.FieldTokenOneID:  {Type: field.TypeUint32, Column: tokenpair.FieldTokenOneID},
			tokenpair.FieldRemark:      {Type: field.TypeString, Column: tokenpair.FieldRemark},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: transaction.FieldID,
			},
		},
		Type: "Transaction",
		Fields: map[string]*sqlgraph.FieldSpec{
			transaction.FieldCreatedAt:       {Type: field.TypeUint32, Column: transaction.FieldCreatedAt},
			transaction.FieldUpdatedAt:       {Type: field.TypeUint32, Column: transaction.FieldUpdatedAt},
			transaction.FieldDeletedAt:       {Type: field.TypeUint32, Column: transaction.FieldDeletedAt},
			transaction.FieldPoolID:          {Type: field.TypeUint64, Column: transaction.FieldPoolID},
			transaction.FieldTransactionID:   {Type: field.TypeUint64, Column: transaction.FieldTransactionID},
			transaction.FieldTransactionType: {Type: field.TypeString, Column: transaction.FieldTransactionType},
			transaction.FieldAmountZeroIn:    {Type: field.TypeFloat64, Column: transaction.FieldAmountZeroIn},
			transaction.FieldAmountOneIn:     {Type: field.TypeFloat64, Column: transaction.FieldAmountOneIn},
			transaction.FieldAmountZeroOut:   {Type: field.TypeFloat64, Column: transaction.FieldAmountZeroOut},
			transaction.FieldAmountOneOut:    {Type: field.TypeFloat64, Column: transaction.FieldAmountOneOut},
			transaction.FieldTimestamp:       {Type: field.TypeUint32, Column: transaction.FieldTimestamp},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (kq *KPointQuery) addPredicate(pred func(s *sql.Selector)) {
	kq.predicates = append(kq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the KPointQuery builder.
func (kq *KPointQuery) Filter() *KPointFilter {
	return &KPointFilter{config: kq.config, predicateAdder: kq}
}

// addPredicate implements the predicateAdder interface.
func (m *KPointMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the KPointMutation builder.
func (m *KPointMutation) Filter() *KPointFilter {
	return &KPointFilter{config: m.config, predicateAdder: m}
}

// KPointFilter provides a generic filtering capability at runtime for KPointQuery.
type KPointFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *KPointFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *KPointFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(kpoint.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *KPointFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(kpoint.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *KPointFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(kpoint.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *KPointFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(kpoint.FieldDeletedAt))
}

// WhereTokenPairID applies the entql uint32 predicate on the token_pair_id field.
func (f *KPointFilter) WhereTokenPairID(p entql.Uint32P) {
	f.Where(p.Field(kpoint.FieldTokenPairID))
}

// WhereKPointType applies the entql string predicate on the k_point_type field.
func (f *KPointFilter) WhereKPointType(p entql.StringP) {
	f.Where(p.Field(kpoint.FieldKPointType))
}

// WhereOpen applies the entql float64 predicate on the open field.
func (f *KPointFilter) WhereOpen(p entql.Float64P) {
	f.Where(p.Field(kpoint.FieldOpen))
}

// WhereHigh applies the entql float64 predicate on the high field.
func (f *KPointFilter) WhereHigh(p entql.Float64P) {
	f.Where(p.Field(kpoint.FieldHigh))
}

// WhereLow applies the entql float64 predicate on the low field.
func (f *KPointFilter) WhereLow(p entql.Float64P) {
	f.Where(p.Field(kpoint.FieldLow))
}

// WhereClose applies the entql float64 predicate on the close field.
func (f *KPointFilter) WhereClose(p entql.Float64P) {
	f.Where(p.Field(kpoint.FieldClose))
}

// WhereStartTime applies the entql uint32 predicate on the start_time field.
func (f *KPointFilter) WhereStartTime(p entql.Uint32P) {
	f.Where(p.Field(kpoint.FieldStartTime))
}

// WhereEndTime applies the entql uint32 predicate on the end_time field.
func (f *KPointFilter) WhereEndTime(p entql.Uint32P) {
	f.Where(p.Field(kpoint.FieldEndTime))
}

// addPredicate implements the predicateAdder interface.
func (kq *KPriceQuery) addPredicate(pred func(s *sql.Selector)) {
	kq.predicates = append(kq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the KPriceQuery builder.
func (kq *KPriceQuery) Filter() *KPriceFilter {
	return &KPriceFilter{config: kq.config, predicateAdder: kq}
}

// addPredicate implements the predicateAdder interface.
func (m *KPriceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the KPriceMutation builder.
func (m *KPriceMutation) Filter() *KPriceFilter {
	return &KPriceFilter{config: m.config, predicateAdder: m}
}

// KPriceFilter provides a generic filtering capability at runtime for KPriceQuery.
type KPriceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *KPriceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *KPriceFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(kprice.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *KPriceFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(kprice.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *KPriceFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(kprice.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *KPriceFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(kprice.FieldDeletedAt))
}

// WhereTokenPairID applies the entql uint32 predicate on the token_pair_id field.
func (f *KPriceFilter) WhereTokenPairID(p entql.Uint32P) {
	f.Where(p.Field(kprice.FieldTokenPairID))
}

// WherePrice applies the entql float64 predicate on the price field.
func (f *KPriceFilter) WherePrice(p entql.Float64P) {
	f.Where(p.Field(kprice.FieldPrice))
}

// WhereTimestamp applies the entql uint32 predicate on the timestamp field.
func (f *KPriceFilter) WhereTimestamp(p entql.Uint32P) {
	f.Where(p.Field(kprice.FieldTimestamp))
}

// addPredicate implements the predicateAdder interface.
func (tq *TokenQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TokenQuery builder.
func (tq *TokenQuery) Filter() *TokenFilter {
	return &TokenFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TokenMutation builder.
func (m *TokenMutation) Filter() *TokenFilter {
	return &TokenFilter{config: m.config, predicateAdder: m}
}

// TokenFilter provides a generic filtering capability at runtime for TokenQuery.
type TokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TokenFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(token.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *TokenFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(token.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *TokenFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(token.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *TokenFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(token.FieldDeletedAt))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *TokenFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(token.FieldAddress))
}

// WhereSite applies the entql string predicate on the site field.
func (f *TokenFilter) WhereSite(p entql.StringP) {
	f.Where(p.Field(token.FieldSite))
}

// WhereIcon applies the entql string predicate on the icon field.
func (f *TokenFilter) WhereIcon(p entql.StringP) {
	f.Where(p.Field(token.FieldIcon))
}

// WhereName applies the entql string predicate on the name field.
func (f *TokenFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(token.FieldName))
}

// WhereSymbol applies the entql string predicate on the symbol field.
func (f *TokenFilter) WhereSymbol(p entql.StringP) {
	f.Where(p.Field(token.FieldSymbol))
}

// addPredicate implements the predicateAdder interface.
func (tpq *TokenPairQuery) addPredicate(pred func(s *sql.Selector)) {
	tpq.predicates = append(tpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TokenPairQuery builder.
func (tpq *TokenPairQuery) Filter() *TokenPairFilter {
	return &TokenPairFilter{config: tpq.config, predicateAdder: tpq}
}

// addPredicate implements the predicateAdder interface.
func (m *TokenPairMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TokenPairMutation builder.
func (m *TokenPairMutation) Filter() *TokenPairFilter {
	return &TokenPairFilter{config: m.config, predicateAdder: m}
}

// TokenPairFilter provides a generic filtering capability at runtime for TokenPairQuery.
type TokenPairFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TokenPairFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TokenPairFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(tokenpair.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *TokenPairFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(tokenpair.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *TokenPairFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(tokenpair.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *TokenPairFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(tokenpair.FieldDeletedAt))
}

// WherePoolID applies the entql uint64 predicate on the pool_id field.
func (f *TokenPairFilter) WherePoolID(p entql.Uint64P) {
	f.Where(p.Field(tokenpair.FieldPoolID))
}

// WhereTokenZeroID applies the entql uint32 predicate on the token_zero_id field.
func (f *TokenPairFilter) WhereTokenZeroID(p entql.Uint32P) {
	f.Where(p.Field(tokenpair.FieldTokenZeroID))
}

// WhereTokenOneID applies the entql uint32 predicate on the token_one_id field.
func (f *TokenPairFilter) WhereTokenOneID(p entql.Uint32P) {
	f.Where(p.Field(tokenpair.FieldTokenOneID))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *TokenPairFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(tokenpair.FieldRemark))
}

// addPredicate implements the predicateAdder interface.
func (tq *TransactionQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TransactionQuery builder.
func (tq *TransactionQuery) Filter() *TransactionFilter {
	return &TransactionFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TransactionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TransactionMutation builder.
func (m *TransactionMutation) Filter() *TransactionFilter {
	return &TransactionFilter{config: m.config, predicateAdder: m}
}

// TransactionFilter provides a generic filtering capability at runtime for TransactionQuery.
type TransactionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TransactionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TransactionFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(transaction.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *TransactionFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(transaction.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *TransactionFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(transaction.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *TransactionFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(transaction.FieldDeletedAt))
}

// WherePoolID applies the entql uint64 predicate on the pool_id field.
func (f *TransactionFilter) WherePoolID(p entql.Uint64P) {
	f.Where(p.Field(transaction.FieldPoolID))
}

// WhereTransactionID applies the entql uint64 predicate on the transaction_id field.
func (f *TransactionFilter) WhereTransactionID(p entql.Uint64P) {
	f.Where(p.Field(transaction.FieldTransactionID))
}

// WhereTransactionType applies the entql string predicate on the transaction_type field.
func (f *TransactionFilter) WhereTransactionType(p entql.StringP) {
	f.Where(p.Field(transaction.FieldTransactionType))
}

// WhereAmountZeroIn applies the entql float64 predicate on the amount_zero_in field.
func (f *TransactionFilter) WhereAmountZeroIn(p entql.Float64P) {
	f.Where(p.Field(transaction.FieldAmountZeroIn))
}

// WhereAmountOneIn applies the entql float64 predicate on the amount_one_in field.
func (f *TransactionFilter) WhereAmountOneIn(p entql.Float64P) {
	f.Where(p.Field(transaction.FieldAmountOneIn))
}

// WhereAmountZeroOut applies the entql float64 predicate on the amount_zero_out field.
func (f *TransactionFilter) WhereAmountZeroOut(p entql.Float64P) {
	f.Where(p.Field(transaction.FieldAmountZeroOut))
}

// WhereAmountOneOut applies the entql float64 predicate on the amount_one_out field.
func (f *TransactionFilter) WhereAmountOneOut(p entql.Float64P) {
	f.Where(p.Field(transaction.FieldAmountOneOut))
}

// WhereTimestamp applies the entql uint32 predicate on the timestamp field.
func (f *TransactionFilter) WhereTimestamp(p entql.Uint32P) {
	f.Where(p.Field(transaction.FieldTimestamp))
}
