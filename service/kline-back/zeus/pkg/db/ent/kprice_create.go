// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/kprice"
)

// KPriceCreate is the builder for creating a KPrice entity.
type KPriceCreate struct {
	config
	mutation *KPriceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (kc *KPriceCreate) SetCreatedAt(u uint32) *KPriceCreate {
	kc.mutation.SetCreatedAt(u)
	return kc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kc *KPriceCreate) SetNillableCreatedAt(u *uint32) *KPriceCreate {
	if u != nil {
		kc.SetCreatedAt(*u)
	}
	return kc
}

// SetUpdatedAt sets the "updated_at" field.
func (kc *KPriceCreate) SetUpdatedAt(u uint32) *KPriceCreate {
	kc.mutation.SetUpdatedAt(u)
	return kc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (kc *KPriceCreate) SetNillableUpdatedAt(u *uint32) *KPriceCreate {
	if u != nil {
		kc.SetUpdatedAt(*u)
	}
	return kc
}

// SetDeletedAt sets the "deleted_at" field.
func (kc *KPriceCreate) SetDeletedAt(u uint32) *KPriceCreate {
	kc.mutation.SetDeletedAt(u)
	return kc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (kc *KPriceCreate) SetNillableDeletedAt(u *uint32) *KPriceCreate {
	if u != nil {
		kc.SetDeletedAt(*u)
	}
	return kc
}

// SetTokenPairID sets the "token_pair_id" field.
func (kc *KPriceCreate) SetTokenPairID(u uint32) *KPriceCreate {
	kc.mutation.SetTokenPairID(u)
	return kc
}

// SetPrice sets the "price" field.
func (kc *KPriceCreate) SetPrice(f float64) *KPriceCreate {
	kc.mutation.SetPrice(f)
	return kc
}

// SetTimestamp sets the "timestamp" field.
func (kc *KPriceCreate) SetTimestamp(u uint32) *KPriceCreate {
	kc.mutation.SetTimestamp(u)
	return kc
}

// SetID sets the "id" field.
func (kc *KPriceCreate) SetID(u uint32) *KPriceCreate {
	kc.mutation.SetID(u)
	return kc
}

// Mutation returns the KPriceMutation object of the builder.
func (kc *KPriceCreate) Mutation() *KPriceMutation {
	return kc.mutation
}

// Save creates the KPrice in the database.
func (kc *KPriceCreate) Save(ctx context.Context) (*KPrice, error) {
	var (
		err  error
		node *KPrice
	)
	if err := kc.defaults(); err != nil {
		return nil, err
	}
	if len(kc.hooks) == 0 {
		if err = kc.check(); err != nil {
			return nil, err
		}
		node, err = kc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KPriceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kc.check(); err != nil {
				return nil, err
			}
			kc.mutation = mutation
			if node, err = kc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(kc.hooks) - 1; i >= 0; i-- {
			if kc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, kc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*KPrice)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from KPriceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (kc *KPriceCreate) SaveX(ctx context.Context) *KPrice {
	v, err := kc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kc *KPriceCreate) Exec(ctx context.Context) error {
	_, err := kc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kc *KPriceCreate) ExecX(ctx context.Context) {
	if err := kc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kc *KPriceCreate) defaults() error {
	if _, ok := kc.mutation.CreatedAt(); !ok {
		if kprice.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized kprice.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := kprice.DefaultCreatedAt()
		kc.mutation.SetCreatedAt(v)
	}
	if _, ok := kc.mutation.UpdatedAt(); !ok {
		if kprice.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized kprice.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := kprice.DefaultUpdatedAt()
		kc.mutation.SetUpdatedAt(v)
	}
	if _, ok := kc.mutation.DeletedAt(); !ok {
		if kprice.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized kprice.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := kprice.DefaultDeletedAt()
		kc.mutation.SetDeletedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (kc *KPriceCreate) check() error {
	if _, ok := kc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "KPrice.created_at"`)}
	}
	if _, ok := kc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "KPrice.updated_at"`)}
	}
	if _, ok := kc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "KPrice.deleted_at"`)}
	}
	if _, ok := kc.mutation.TokenPairID(); !ok {
		return &ValidationError{Name: "token_pair_id", err: errors.New(`ent: missing required field "KPrice.token_pair_id"`)}
	}
	if _, ok := kc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "KPrice.price"`)}
	}
	if _, ok := kc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "KPrice.timestamp"`)}
	}
	return nil
}

func (kc *KPriceCreate) sqlSave(ctx context.Context) (*KPrice, error) {
	_node, _spec := kc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (kc *KPriceCreate) createSpec() (*KPrice, *sqlgraph.CreateSpec) {
	var (
		_node = &KPrice{config: kc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: kprice.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: kprice.FieldID,
			},
		}
	)
	_spec.OnConflict = kc.conflict
	if id, ok := kc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := kc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kprice.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := kc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kprice.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := kc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kprice.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := kc.mutation.TokenPairID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kprice.FieldTokenPairID,
		})
		_node.TokenPairID = value
	}
	if value, ok := kc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kprice.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := kc.mutation.Timestamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: kprice.FieldTimestamp,
		})
		_node.Timestamp = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KPrice.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KPriceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (kc *KPriceCreate) OnConflict(opts ...sql.ConflictOption) *KPriceUpsertOne {
	kc.conflict = opts
	return &KPriceUpsertOne{
		create: kc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KPrice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kc *KPriceCreate) OnConflictColumns(columns ...string) *KPriceUpsertOne {
	kc.conflict = append(kc.conflict, sql.ConflictColumns(columns...))
	return &KPriceUpsertOne{
		create: kc,
	}
}

type (
	// KPriceUpsertOne is the builder for "upsert"-ing
	//  one KPrice node.
	KPriceUpsertOne struct {
		create *KPriceCreate
	}

	// KPriceUpsert is the "OnConflict" setter.
	KPriceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *KPriceUpsert) SetCreatedAt(v uint32) *KPriceUpsert {
	u.Set(kprice.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *KPriceUpsert) UpdateCreatedAt() *KPriceUpsert {
	u.SetExcluded(kprice.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *KPriceUpsert) AddCreatedAt(v uint32) *KPriceUpsert {
	u.Add(kprice.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KPriceUpsert) SetUpdatedAt(v uint32) *KPriceUpsert {
	u.Set(kprice.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KPriceUpsert) UpdateUpdatedAt() *KPriceUpsert {
	u.SetExcluded(kprice.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *KPriceUpsert) AddUpdatedAt(v uint32) *KPriceUpsert {
	u.Add(kprice.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *KPriceUpsert) SetDeletedAt(v uint32) *KPriceUpsert {
	u.Set(kprice.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *KPriceUpsert) UpdateDeletedAt() *KPriceUpsert {
	u.SetExcluded(kprice.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *KPriceUpsert) AddDeletedAt(v uint32) *KPriceUpsert {
	u.Add(kprice.FieldDeletedAt, v)
	return u
}

// SetTokenPairID sets the "token_pair_id" field.
func (u *KPriceUpsert) SetTokenPairID(v uint32) *KPriceUpsert {
	u.Set(kprice.FieldTokenPairID, v)
	return u
}

// UpdateTokenPairID sets the "token_pair_id" field to the value that was provided on create.
func (u *KPriceUpsert) UpdateTokenPairID() *KPriceUpsert {
	u.SetExcluded(kprice.FieldTokenPairID)
	return u
}

// AddTokenPairID adds v to the "token_pair_id" field.
func (u *KPriceUpsert) AddTokenPairID(v uint32) *KPriceUpsert {
	u.Add(kprice.FieldTokenPairID, v)
	return u
}

// SetPrice sets the "price" field.
func (u *KPriceUpsert) SetPrice(v float64) *KPriceUpsert {
	u.Set(kprice.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *KPriceUpsert) UpdatePrice() *KPriceUpsert {
	u.SetExcluded(kprice.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *KPriceUpsert) AddPrice(v float64) *KPriceUpsert {
	u.Add(kprice.FieldPrice, v)
	return u
}

// SetTimestamp sets the "timestamp" field.
func (u *KPriceUpsert) SetTimestamp(v uint32) *KPriceUpsert {
	u.Set(kprice.FieldTimestamp, v)
	return u
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *KPriceUpsert) UpdateTimestamp() *KPriceUpsert {
	u.SetExcluded(kprice.FieldTimestamp)
	return u
}

// AddTimestamp adds v to the "timestamp" field.
func (u *KPriceUpsert) AddTimestamp(v uint32) *KPriceUpsert {
	u.Add(kprice.FieldTimestamp, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.KPrice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(kprice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KPriceUpsertOne) UpdateNewValues() *KPriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(kprice.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KPrice.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *KPriceUpsertOne) Ignore() *KPriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KPriceUpsertOne) DoNothing() *KPriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KPriceCreate.OnConflict
// documentation for more info.
func (u *KPriceUpsertOne) Update(set func(*KPriceUpsert)) *KPriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KPriceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *KPriceUpsertOne) SetCreatedAt(v uint32) *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *KPriceUpsertOne) AddCreatedAt(v uint32) *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *KPriceUpsertOne) UpdateCreatedAt() *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KPriceUpsertOne) SetUpdatedAt(v uint32) *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *KPriceUpsertOne) AddUpdatedAt(v uint32) *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KPriceUpsertOne) UpdateUpdatedAt() *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *KPriceUpsertOne) SetDeletedAt(v uint32) *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *KPriceUpsertOne) AddDeletedAt(v uint32) *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *KPriceUpsertOne) UpdateDeletedAt() *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTokenPairID sets the "token_pair_id" field.
func (u *KPriceUpsertOne) SetTokenPairID(v uint32) *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.SetTokenPairID(v)
	})
}

// AddTokenPairID adds v to the "token_pair_id" field.
func (u *KPriceUpsertOne) AddTokenPairID(v uint32) *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.AddTokenPairID(v)
	})
}

// UpdateTokenPairID sets the "token_pair_id" field to the value that was provided on create.
func (u *KPriceUpsertOne) UpdateTokenPairID() *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.UpdateTokenPairID()
	})
}

// SetPrice sets the "price" field.
func (u *KPriceUpsertOne) SetPrice(v float64) *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *KPriceUpsertOne) AddPrice(v float64) *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *KPriceUpsertOne) UpdatePrice() *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.UpdatePrice()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *KPriceUpsertOne) SetTimestamp(v uint32) *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.SetTimestamp(v)
	})
}

// AddTimestamp adds v to the "timestamp" field.
func (u *KPriceUpsertOne) AddTimestamp(v uint32) *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.AddTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *KPriceUpsertOne) UpdateTimestamp() *KPriceUpsertOne {
	return u.Update(func(s *KPriceUpsert) {
		s.UpdateTimestamp()
	})
}

// Exec executes the query.
func (u *KPriceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KPriceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KPriceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *KPriceUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *KPriceUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// KPriceCreateBulk is the builder for creating many KPrice entities in bulk.
type KPriceCreateBulk struct {
	config
	builders []*KPriceCreate
	conflict []sql.ConflictOption
}

// Save creates the KPrice entities in the database.
func (kcb *KPriceCreateBulk) Save(ctx context.Context) ([]*KPrice, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kcb.builders))
	nodes := make([]*KPrice, len(kcb.builders))
	mutators := make([]Mutator, len(kcb.builders))
	for i := range kcb.builders {
		func(i int, root context.Context) {
			builder := kcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KPriceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = kcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kcb *KPriceCreateBulk) SaveX(ctx context.Context) []*KPrice {
	v, err := kcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kcb *KPriceCreateBulk) Exec(ctx context.Context) error {
	_, err := kcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcb *KPriceCreateBulk) ExecX(ctx context.Context) {
	if err := kcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KPrice.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KPriceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (kcb *KPriceCreateBulk) OnConflict(opts ...sql.ConflictOption) *KPriceUpsertBulk {
	kcb.conflict = opts
	return &KPriceUpsertBulk{
		create: kcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KPrice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kcb *KPriceCreateBulk) OnConflictColumns(columns ...string) *KPriceUpsertBulk {
	kcb.conflict = append(kcb.conflict, sql.ConflictColumns(columns...))
	return &KPriceUpsertBulk{
		create: kcb,
	}
}

// KPriceUpsertBulk is the builder for "upsert"-ing
// a bulk of KPrice nodes.
type KPriceUpsertBulk struct {
	create *KPriceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.KPrice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(kprice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KPriceUpsertBulk) UpdateNewValues() *KPriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(kprice.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KPrice.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *KPriceUpsertBulk) Ignore() *KPriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KPriceUpsertBulk) DoNothing() *KPriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KPriceCreateBulk.OnConflict
// documentation for more info.
func (u *KPriceUpsertBulk) Update(set func(*KPriceUpsert)) *KPriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KPriceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *KPriceUpsertBulk) SetCreatedAt(v uint32) *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *KPriceUpsertBulk) AddCreatedAt(v uint32) *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *KPriceUpsertBulk) UpdateCreatedAt() *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *KPriceUpsertBulk) SetUpdatedAt(v uint32) *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *KPriceUpsertBulk) AddUpdatedAt(v uint32) *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *KPriceUpsertBulk) UpdateUpdatedAt() *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *KPriceUpsertBulk) SetDeletedAt(v uint32) *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *KPriceUpsertBulk) AddDeletedAt(v uint32) *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *KPriceUpsertBulk) UpdateDeletedAt() *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTokenPairID sets the "token_pair_id" field.
func (u *KPriceUpsertBulk) SetTokenPairID(v uint32) *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.SetTokenPairID(v)
	})
}

// AddTokenPairID adds v to the "token_pair_id" field.
func (u *KPriceUpsertBulk) AddTokenPairID(v uint32) *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.AddTokenPairID(v)
	})
}

// UpdateTokenPairID sets the "token_pair_id" field to the value that was provided on create.
func (u *KPriceUpsertBulk) UpdateTokenPairID() *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.UpdateTokenPairID()
	})
}

// SetPrice sets the "price" field.
func (u *KPriceUpsertBulk) SetPrice(v float64) *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *KPriceUpsertBulk) AddPrice(v float64) *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *KPriceUpsertBulk) UpdatePrice() *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.UpdatePrice()
	})
}

// SetTimestamp sets the "timestamp" field.
func (u *KPriceUpsertBulk) SetTimestamp(v uint32) *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.SetTimestamp(v)
	})
}

// AddTimestamp adds v to the "timestamp" field.
func (u *KPriceUpsertBulk) AddTimestamp(v uint32) *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.AddTimestamp(v)
	})
}

// UpdateTimestamp sets the "timestamp" field to the value that was provided on create.
func (u *KPriceUpsertBulk) UpdateTimestamp() *KPriceUpsertBulk {
	return u.Update(func(s *KPriceUpsert) {
		s.UpdateTimestamp()
	})
}

// Exec executes the query.
func (u *KPriceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the KPriceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KPriceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KPriceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
