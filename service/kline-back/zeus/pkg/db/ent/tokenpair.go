// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Geapefurit/kline-back/zeus/pkg/db/ent/tokenpair"
)

// TokenPair is the model entity for the TokenPair schema.
type TokenPair struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// PoolID holds the value of the "pool_id" field.
	PoolID uint64 `json:"pool_id,omitempty"`
	// TokenZeroID holds the value of the "token_zero_id" field.
	TokenZeroID uint32 `json:"token_zero_id,omitempty"`
	// TokenOneID holds the value of the "token_one_id" field.
	TokenOneID uint32 `json:"token_one_id,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TokenPair) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tokenpair.FieldID, tokenpair.FieldCreatedAt, tokenpair.FieldUpdatedAt, tokenpair.FieldDeletedAt, tokenpair.FieldPoolID, tokenpair.FieldTokenZeroID, tokenpair.FieldTokenOneID:
			values[i] = new(sql.NullInt64)
		case tokenpair.FieldRemark:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TokenPair", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TokenPair fields.
func (tp *TokenPair) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tokenpair.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tp.ID = uint32(value.Int64)
		case tokenpair.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tp.CreatedAt = uint32(value.Int64)
			}
		case tokenpair.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tp.UpdatedAt = uint32(value.Int64)
			}
		case tokenpair.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tp.DeletedAt = uint32(value.Int64)
			}
		case tokenpair.FieldPoolID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pool_id", values[i])
			} else if value.Valid {
				tp.PoolID = uint64(value.Int64)
			}
		case tokenpair.FieldTokenZeroID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field token_zero_id", values[i])
			} else if value.Valid {
				tp.TokenZeroID = uint32(value.Int64)
			}
		case tokenpair.FieldTokenOneID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field token_one_id", values[i])
			} else if value.Valid {
				tp.TokenOneID = uint32(value.Int64)
			}
		case tokenpair.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				tp.Remark = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TokenPair.
// Note that you need to call TokenPair.Unwrap() before calling this method if this TokenPair
// was returned from a transaction, and the transaction was committed or rolled back.
func (tp *TokenPair) Update() *TokenPairUpdateOne {
	return (&TokenPairClient{config: tp.config}).UpdateOne(tp)
}

// Unwrap unwraps the TokenPair entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tp *TokenPair) Unwrap() *TokenPair {
	_tx, ok := tp.config.driver.(*txDriver)
	if !ok {
		panic("ent: TokenPair is not a transactional entity")
	}
	tp.config.driver = _tx.drv
	return tp
}

// String implements the fmt.Stringer.
func (tp *TokenPair) String() string {
	var builder strings.Builder
	builder.WriteString("TokenPair(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", tp.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", tp.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", tp.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("pool_id=")
	builder.WriteString(fmt.Sprintf("%v", tp.PoolID))
	builder.WriteString(", ")
	builder.WriteString("token_zero_id=")
	builder.WriteString(fmt.Sprintf("%v", tp.TokenZeroID))
	builder.WriteString(", ")
	builder.WriteString("token_one_id=")
	builder.WriteString(fmt.Sprintf("%v", tp.TokenOneID))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(tp.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// TokenPairs is a parsable slice of TokenPair.
type TokenPairs []*TokenPair

func (tp TokenPairs) config(cfg config) {
	for _i := range tp {
		tp[_i].config = cfg
	}
}
